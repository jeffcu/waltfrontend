import os
from flask import Flask, request, render_template, send_file
from openai import OpenAI
from dotenv import load_dotenv
from PyPDF2 import PdfReader
import fitz  # PyMuPDF
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# Load the API key from .env file (for local testing)
load_dotenv()

# Initialize OpenAI client
openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Initialize Flask application
app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'  # Folder to store uploaded files
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# Application version
APP_VERSION = "0.1.03"

def call_openai_api(prompt):
    """Function to call OpenAI API with the latest supported method."""
    try:
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are an AI expert on startups."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=150,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Error: {str(e)}"

def extract_text_from_file(filepath):
    """Extract text content from supported file types."""
    if filepath.endswith('.pdf'):
        try:
            # Attempt with PyPDF2
            reader = PdfReader(filepath)
            text = "\n".join([page.extract_text() for page in reader.pages])
            if text.strip():
                return text
            # Fallback to PyMuPDF
            with fitz.open(filepath) as doc:
                text = ""
                for page in doc:
                    text += page.get_text()
                return text
        except Exception as e:
            return f"Error reading PDF: {str(e)}"
    else:
        try:
            with open(filepath, 'r', encoding='utf-8', errors='replace') as f:
                return f.read()
        except Exception as e:
            return f"Error reading file: {str(e)}"

def save_to_pdf(output_text, filename="output.pdf"):
    """Saves given text to a PDF file with professional formatting."""
    pdf_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    c = canvas.Canvas(pdf_path, pagesize=letter)
    width, height = letter

    # Set margins
    margin = 36  # 0.5 inch margin

    # Header
    c.setFont("Helvetica-Bold", 18)
    c.drawCentredString(width / 2.0, height - margin, "Analysis Report")

    # Subheader
    c.setFont("Helvetica-Bold", 14)
    c.drawCentredString(width / 2.0, height - margin - 20, "Generated by Jeff's AI Workshop")

    # Content
    y_position = height - margin - 60
    c.setFont("Helvetica", 12)
    lines = output_text.split("\n")
    for line in lines:
        # Bold labels for sections
        if line.startswith("Meta Instructions:") or line.startswith("User Query:") or line.startswith("API Response:"):
            c.setFont("Helvetica-Bold", 12)
            c.drawString(margin, y_position, line)
            y_position -= 20  # Add extra spacing after a bold line
        else:
            c.setFont("Helvetica", 12)
            c.drawString(margin, y_position, line)
            y_position -= 14

        # Add page break if necessary
        if y_position < margin:
            c.showPage()
            c.setFont("Helvetica", 12)
            y_position = height - margin

    # Footer
    c.setFont("Helvetica", 10)
    c.drawRightString(width - margin, margin / 2, f"Version {APP_VERSION}")

    c.save()
    return pdf_path

@app.route('/', methods=['GET', 'POST'])
def home():
    """Renders the main page with the user query input and displays the inputs, API call, and response."""
    inputs = {}
    api_call_text = ""
    api_response = ""
    error = ""

    # Default text for inputs
    default_meta_instructions = "You're an expert at understanding startup companies. You can summarize them quickly."
    default_user_query = "Tell me about this company and its market. Summarize the company name and what other information you can determine from the provided passed information from their presentation."

    if request.method == 'POST':
        try:
            # Capture user inputs
            meta_instructions = request.form.get('meta_instructions', default_meta_instructions).strip()
            user_query = request.form.get('user_query', default_user_query).strip()

            # Handle uploaded files
            uploaded_files = request.files.getlist('uploaded_files')
            file_content = ""
            for file in uploaded_files:
                if file.filename:
                    filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
                    file.save(filepath)
                    extracted_text = extract_text_from_file(filepath)
                    if "Error" in extracted_text:
                        error = f"Error processing file {file.filename}: {extracted_text}"
                    else:
                        file_content += extracted_text + "\n"

            # Store inputs
            inputs = {
                "Meta Instructions": meta_instructions,
                "User Query": user_query,
                "Uploaded Content": file_content.strip()
            }

            # Combine inputs into API prompt
            api_call_text = (
                f"{meta_instructions}\n\n"
                f"User Query: {user_query}\n\n"
                f"Uploaded Content:\n{file_content}"
            )

            # Call OpenAI API
            api_response = call_openai_api(api_call_text)

        except Exception as e:
            error = f"An error occurred: {str(e)}"

    return render_template('index.html', inputs=inputs, api_call_text=api_call_text,
                           api_response=api_response, error=error, app_version=APP_VERSION,
                           default_meta_instructions=default_meta_instructions,
                           default_user_query=default_user_query)

@app.route('/download', methods=['POST'])
def download_pdf():
    """Generate and serve a PDF of the API response."""
    try:
        # Collect data from the form
        meta_instructions = request.form['meta_instructions']
        user_query = request.form['user_query']
        api_response = request.form['api_response']

        # Combine data into a formatted string
        output_text = (
            f"Meta Instructions:\n{meta_instructions}\n\n"
            f"User Query:\n{user_query}\n\n"
            f"API Response:\n{api_response}\n"
        )

        # Generate the PDF
        pdf_path = save_to_pdf(output_text)

        # Serve the PDF as a downloadable file
        return send_file(pdf_path, as_attachment=True, download_name="output.pdf")
    except Exception as e:
        return f"Error generating PDF: {str(e)}"

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
