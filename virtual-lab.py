
import os
from flask import Flask, request, render_template, send_file
from dotenv import load_dotenv
from weasyprint import HTML
import re
import unicodedata

# Load environment variables
load_dotenv()

# Initialize Flask application
app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'  # Folder to store uploaded files
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# Application version
APP_VERSION = "0.1.10"

def sanitize_text(text):
    """Sanitize text to remove unwanted characters."""
    text = unicodedata.normalize('NFKD', text)
    return re.sub(r'[“”]', '"', text).replace("\u2022", "-").strip()

def generate_pdf(content, filename="output.pdf"):
    """Generate a styled PDF from HTML content."""
    pdf_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)

    html_content = f"""
    <!DOCTYPE html>
    <html lang='en'>
    <head>
        <style>
            body {{ font-family: Arial, sans-serif; line-height: 1.6; margin: 1in; }}
            h1 {{ text-align: center; color: #0073e6; }}
            h2 {{ color: #333; margin-top: 20px; font-weight: bold; }}
            p, li {{ font-size: 12pt; color: #555; }}
            ul {{ margin-left: 20px; padding-left: 20px; list-style-type: disc; }}
            ul li {{ margin-bottom: 10px; }}
            .footer {{ margin-top: 20px; text-align: center; font-size: 10pt; color: #777; }}
        </style>
    </head>
    <body>
        <h1>Analysis Report</h1>
        <div>
            {content.replace("\\n", "<br>")}
        </div>
        <div class='footer'>Generated by Jeff's AI Workshop - Version {APP_VERSION}</div>
    </body>
    </html>
    """

    HTML(string=html_content).write_pdf(pdf_path)
    return pdf_path

@app.route('/', methods=['GET', 'POST'])
def home():
    """Render the main interface."""
    inputs = {}
    api_response = ""
    error = ""

    # Default input values
    default_meta_instructions = "You're an expert at understanding startup companies. You can summarize them quickly."
    default_user_query = "Tell me about this company and its market. Summarize the company name and what other information you can determine from the provided passed information from their presentation."

    if request.method == 'POST':
        try:
            # Get form inputs
            meta_instructions = request.form.get('meta_instructions', default_meta_instructions).strip()
            user_query = request.form.get('user_query', default_user_query).strip()

            # Collect inputs
            inputs = {
                "Meta Instructions": meta_instructions,
                "User Query": user_query
            }

            # Mock API response (replace with actual API call)
            api_response = (
                "Company Name: M&R Technology, Inc. - Infinity Shield\n"
                "Market: Residential garage safety sensors in North America\n"
                "Key Points:\n"
                "- Developed the first full-coverage safety sensor for every garage in North America\n"
                "- Addresses a $1 billion annual problem of car and door damage\n"
                "- Features advanced technology with patented solutions\n"
                "- No competing residential sensor in the market\n"
                "- Strong barriers against competitors\n"
                "- Business model includes direct-to-consumer sales, professional installers/distributors, and partnerships with insurance companies\n"
                "- Sales projections include revenue of $168M and profit of $110M over five years\n"
                "- Team includes experienced founders and key team members\n"
                "- Seeking funding of $250k - $1M\n"
            )

        except Exception as e:
            error = str(e)

    return render_template('index.html', inputs=inputs, api_response=api_response, error=error, app_version=APP_VERSION)

@app.route('/download', methods=['POST'])
def download_pdf():
    """Generate and download a PDF of the API response."""
    try:
        # Get API response
        api_response = request.form.get('api_response', '')

        # Generate PDF
        filename = "analysis_report.pdf"
        pdf_path = generate_pdf(api_response, filename=filename)

        return send_file(pdf_path, as_attachment=True, download_name=filename)
    except Exception as e:
        return f"Error generating PDF: {str(e)}"

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
