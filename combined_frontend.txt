

--- FILE: combined_frontend.txt ---



--- FILE: pubspec.yaml ---

name: walt_interview_app
description: "A new Flutter project."
publish_to: 'none'
version: 1.0.0+1

environment:
  sdk: ^3.7.0

dependencies:
  flutter:
    sdk: flutter
  http: ^1.2.0  # For making HTTP requests to the backend
  cupertino_icons: ^1.0.8 # For iOS style icons
  path_provider: ^2.1.0 # For accessing local file storage

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^5.0.0

flutter: # <-- This is the SINGLE, CORRECT 'flutter:' section

  uses-material-design: true

  assets: # <-- Assets section correctly indented
    - assets/images/walt.png # <-- Path to your image, correctly indented


--- FILE: analysis_options.yaml ---

# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options


--- FILE: macos/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json ---

{
  "images" : [
    {
      "size" : "16x16",
      "idiom" : "mac",
      "filename" : "app_icon_16.png",
      "scale" : "1x"
    },
    {
      "size" : "16x16",
      "idiom" : "mac",
      "filename" : "app_icon_32.png",
      "scale" : "2x"
    },
    {
      "size" : "32x32",
      "idiom" : "mac",
      "filename" : "app_icon_32.png",
      "scale" : "1x"
    },
    {
      "size" : "32x32",
      "idiom" : "mac",
      "filename" : "app_icon_64.png",
      "scale" : "2x"
    },
    {
      "size" : "128x128",
      "idiom" : "mac",
      "filename" : "app_icon_128.png",
      "scale" : "1x"
    },
    {
      "size" : "128x128",
      "idiom" : "mac",
      "filename" : "app_icon_256.png",
      "scale" : "2x"
    },
    {
      "size" : "256x256",
      "idiom" : "mac",
      "filename" : "app_icon_256.png",
      "scale" : "1x"
    },
    {
      "size" : "256x256",
      "idiom" : "mac",
      "filename" : "app_icon_512.png",
      "scale" : "2x"
    },
    {
      "size" : "512x512",
      "idiom" : "mac",
      "filename" : "app_icon_512.png",
      "scale" : "1x"
    },
    {
      "size" : "512x512",
      "idiom" : "mac",
      "filename" : "app_icon_1024.png",
      "scale" : "2x"
    }
  ],
  "info" : {
    "version" : 1,
    "author" : "xcode"
  }
}


--- FILE: test/widget_test.dart ---

// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:walt_interview_app/main.dart';

void main() {
  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(const MyApp());

    // Verify that our counter starts at 0.
    expect(find.text('0'), findsOneWidget);
    expect(find.text('1'), findsNothing);

    // Tap the '+' icon and trigger a frame.
    await tester.tap(find.byIcon(Icons.add));
    await tester.pump();

    // Verify that our counter has incremented.
    expect(find.text('0'), findsNothing);
    expect(find.text('1'), findsOneWidget);
  });
}


--- FILE: web/manifest.json ---

{
    "name": "walt_interview_app",
    "short_name": "walt_interview_app",
    "start_url": ".",
    "display": "standalone",
    "background_color": "#0175C2",
    "theme_color": "#0175C2",
    "description": "A new Flutter project.",
    "orientation": "portrait-primary",
    "prefer_related_applications": false,
    "icons": [
        {
            "src": "icons/Icon-192.png",
            "sizes": "192x192",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-512.png",
            "sizes": "512x512",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-maskable-192.png",
            "sizes": "192x192",
            "type": "image/png",
            "purpose": "maskable"
        },
        {
            "src": "icons/Icon-maskable-512.png",
            "sizes": "512x512",
            "type": "image/png",
            "purpose": "maskable"
        }
    ]
}


--- FILE: ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json ---

{
  "images" : [
    {
      "idiom" : "universal",
      "filename" : "LaunchImage.png",
      "scale" : "1x"
    },
    {
      "idiom" : "universal",
      "filename" : "LaunchImage@2x.png",
      "scale" : "2x"
    },
    {
      "idiom" : "universal",
      "filename" : "LaunchImage@3x.png",
      "scale" : "3x"
    }
  ],
  "info" : {
    "version" : 1,
    "author" : "xcode"
  }
}


--- FILE: ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json ---

{
  "images" : [
    {
      "size" : "20x20",
      "idiom" : "iphone",
      "filename" : "Icon-App-20x20@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "20x20",
      "idiom" : "iphone",
      "filename" : "Icon-App-20x20@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "29x29",
      "idiom" : "iphone",
      "filename" : "Icon-App-29x29@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "29x29",
      "idiom" : "iphone",
      "filename" : "Icon-App-29x29@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "29x29",
      "idiom" : "iphone",
      "filename" : "Icon-App-29x29@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "40x40",
      "idiom" : "iphone",
      "filename" : "Icon-App-40x40@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "40x40",
      "idiom" : "iphone",
      "filename" : "Icon-App-40x40@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "60x60",
      "idiom" : "iphone",
      "filename" : "Icon-App-60x60@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "60x60",
      "idiom" : "iphone",
      "filename" : "Icon-App-60x60@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "20x20",
      "idiom" : "ipad",
      "filename" : "Icon-App-20x20@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "20x20",
      "idiom" : "ipad",
      "filename" : "Icon-App-20x20@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "29x29",
      "idiom" : "ipad",
      "filename" : "Icon-App-29x29@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "29x29",
      "idiom" : "ipad",
      "filename" : "Icon-App-29x29@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "40x40",
      "idiom" : "ipad",
      "filename" : "Icon-App-40x40@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "40x40",
      "idiom" : "ipad",
      "filename" : "Icon-App-40x40@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "76x76",
      "idiom" : "ipad",
      "filename" : "Icon-App-76x76@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "76x76",
      "idiom" : "ipad",
      "filename" : "Icon-App-76x76@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "83.5x83.5",
      "idiom" : "ipad",
      "filename" : "Icon-App-83.5x83.5@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "1024x1024",
      "idiom" : "ios-marketing",
      "filename" : "Icon-App-1024x1024@1x.png",
      "scale" : "1x"
    }
  ],
  "info" : {
    "version" : 1,
    "author" : "xcode"
  }
}


--- FILE: ios/Pods/Local Podspecs/path_provider_foundation.podspec.json ---

{
  "name": "path_provider_foundation",
  "version": "0.0.1",
  "summary": "An iOS and macOS implementation of the path_provider plugin.",
  "description": "An iOS and macOS implementation of the Flutter plugin for getting commonly used locations on the filesystem.",
  "homepage": "https://github.com/flutter/packages/tree/main/packages/path_provider/path_provider_foundation",
  "license": {
    "type": "BSD",
    "file": "../LICENSE"
  },
  "authors": {
    "Flutter Dev Team": "flutter-dev@googlegroups.com"
  },
  "source": {
    "http": "https://github.com/flutter/packages/tree/main/packages/path_provider/path_provider_foundation"
  },
  "source_files": "path_provider_foundation/Sources/path_provider_foundation/**/*.swift",
  "ios": {
    "dependencies": {
      "Flutter": []
    },
    "xcconfig": {
      "LIBRARY_SEARCH_PATHS": "$(TOOLCHAIN_DIR)/usr/lib/swift/$(PLATFORM_NAME)/ $(SDKROOT)/usr/lib/swift",
      "LD_RUNPATH_SEARCH_PATHS": "/usr/lib/swift"
    }
  },
  "osx": {
    "dependencies": {
      "FlutterMacOS": []
    }
  },
  "platforms": {
    "ios": "12.0",
    "osx": "10.14"
  },
  "swift_versions": "5.0",
  "resource_bundles": {
    "path_provider_foundation_privacy": [
      "path_provider_foundation/Sources/path_provider_foundation/Resources/PrivacyInfo.xcprivacy"
    ]
  },
  "swift_version": "5.0"
}


--- FILE: ios/Pods/Local Podspecs/Flutter.podspec.json ---

{
  "name": "Flutter",
  "version": "1.0.0",
  "summary": "A UI toolkit for beautiful and fast apps.",
  "homepage": "https://flutter.dev",
  "license": {
    "type": "BSD"
  },
  "authors": {
    "Flutter Dev Team": "flutter-dev@googlegroups.com"
  },
  "source": {
    "git": "https://github.com/flutter/engine",
    "tag": "1.0.0"
  },
  "platforms": {
    "ios": "12.0"
  },
  "vendored_frameworks": "path/to/nothing"
}


--- FILE: android/app/src/profile/AndroidManifest.xml ---

<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- The INTERNET permission is required for development. Specifically,
         the Flutter tool needs it to communicate with the running application
         to allow setting breakpoints, to provide hot reload, etc.
    -->
    <uses-permission android:name="android.permission.INTERNET"/>
</manifest>


--- FILE: android/app/src/main/AndroidManifest.xml ---

<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <application
        android:label="walt_interview_app"
        android:name="${applicationName}"
        android:icon="@mipmap/ic_launcher">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:taskAffinity=""
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />
    </application>
    <!-- Required to query activities that can process text, see:
         https://developer.android.com/training/package-visibility and
         https://developer.android.com/reference/android/content/Intent#ACTION_PROCESS_TEXT.

         In particular, this is used by the Flutter engine in io.flutter.plugin.text.ProcessTextPlugin. -->
    <queries>
        <intent>
            <action android:name="android.intent.action.PROCESS_TEXT"/>
            <data android:mimeType="text/plain"/>
        </intent>
    </queries>
</manifest>


--- FILE: android/app/src/main/res/drawable/launch_background.xml ---

<?xml version="1.0" encoding="utf-8"?>
<!-- Modify this file to customize your launch splash screen -->
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="@android:color/white" />

    <!-- You can insert your own image assets here -->
    <!-- <item>
        <bitmap
            android:gravity="center"
            android:src="@mipmap/launch_image" />
    </item> -->
</layer-list>


--- FILE: android/app/src/main/res/values-night/styles.xml ---

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is on -->
    <style name="LaunchTheme" parent="@android:style/Theme.Black.NoTitleBar">
        <!-- Show a splash screen on the activity. Automatically removed when
             the Flutter engine draws its first frame -->
        <item name="android:windowBackground">@drawable/launch_background</item>
    </style>
    <!-- Theme applied to the Android Window as soon as the process has started.
         This theme determines the color of the Android Window while your
         Flutter UI initializes, as well as behind your Flutter UI while its
         running.

         This Theme is only used starting with V2 of Flutter's Android embedding. -->
    <style name="NormalTheme" parent="@android:style/Theme.Black.NoTitleBar">
        <item name="android:windowBackground">?android:colorBackground</item>
    </style>
</resources>


--- FILE: android/app/src/main/res/values/styles.xml ---

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is off -->
    <style name="LaunchTheme" parent="@android:style/Theme.Light.NoTitleBar">
        <!-- Show a splash screen on the activity. Automatically removed when
             the Flutter engine draws its first frame -->
        <item name="android:windowBackground">@drawable/launch_background</item>
    </style>
    <!-- Theme applied to the Android Window as soon as the process has started.
         This theme determines the color of the Android Window while your
         Flutter UI initializes, as well as behind your Flutter UI while its
         running.

         This Theme is only used starting with V2 of Flutter's Android embedding. -->
    <style name="NormalTheme" parent="@android:style/Theme.Light.NoTitleBar">
        <item name="android:windowBackground">?android:colorBackground</item>
    </style>
</resources>


--- FILE: android/app/src/main/res/drawable-v21/launch_background.xml ---

<?xml version="1.0" encoding="utf-8"?>
<!-- Modify this file to customize your launch splash screen -->
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="?android:colorBackground" />

    <!-- You can insert your own image assets here -->
    <!-- <item>
        <bitmap
            android:gravity="center"
            android:src="@mipmap/launch_image" />
    </item> -->
</layer-list>


--- FILE: android/app/src/debug/AndroidManifest.xml ---

<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- The INTERNET permission is required for development. Specifically,
         the Flutter tool needs it to communicate with the running application
         to allow setting breakpoints, to provide hot reload, etc.
    -->
    <uses-permission android:name="android.permission.INTERNET"/>
</manifest>


--- FILE: .venv/lib/python3.11/site-packages/requests-2.32.3.dist-info/top_level.txt ---

requests


--- FILE: .venv/lib/python3.11/site-packages/blinker-1.9.0.dist-info/LICENSE.txt ---

Copyright 2010 Jason Kirtland

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- FILE: .venv/lib/python3.11/site-packages/h11-0.14.0.dist-info/top_level.txt ---

h11


--- FILE: .venv/lib/python3.11/site-packages/h11-0.14.0.dist-info/LICENSE.txt ---

The MIT License (MIT)

Copyright (c) 2016 Nathaniel J. Smith <njs@pobox.com> and other contributors

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- FILE: .venv/lib/python3.11/site-packages/itsdangerous-2.2.0.dist-info/LICENSE.txt ---

Copyright 2011 Pallets

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

1.  Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

2.  Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

3.  Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- FILE: .venv/lib/python3.11/site-packages/tqdm-4.67.1.dist-info/entry_points.txt ---

[console_scripts]
tqdm = tqdm.cli:main


--- FILE: .venv/lib/python3.11/site-packages/tqdm-4.67.1.dist-info/top_level.txt ---

tqdm


--- FILE: .venv/lib/python3.11/site-packages/urllib3-2.3.0.dist-info/licenses/LICENSE.txt ---

MIT License

Copyright (c) 2008-2020 Andrey Petrov and contributors.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


--- FILE: .venv/lib/python3.11/site-packages/click-8.1.8.dist-info/LICENSE.txt ---

Copyright 2014 Pallets

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

1.  Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

2.  Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

3.  Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- FILE: .venv/lib/python3.11/site-packages/setuptools-65.5.0.dist-info/entry_points.txt ---

[distutils.commands]
alias = setuptools.command.alias:alias
bdist_egg = setuptools.command.bdist_egg:bdist_egg
bdist_rpm = setuptools.command.bdist_rpm:bdist_rpm
build = setuptools.command.build:build
build_clib = setuptools.command.build_clib:build_clib
build_ext = setuptools.command.build_ext:build_ext
build_py = setuptools.command.build_py:build_py
develop = setuptools.command.develop:develop
dist_info = setuptools.command.dist_info:dist_info
easy_install = setuptools.command.easy_install:easy_install
editable_wheel = setuptools.command.editable_wheel:editable_wheel
egg_info = setuptools.command.egg_info:egg_info
install = setuptools.command.install:install
install_egg_info = setuptools.command.install_egg_info:install_egg_info
install_lib = setuptools.command.install_lib:install_lib
install_scripts = setuptools.command.install_scripts:install_scripts
rotate = setuptools.command.rotate:rotate
saveopts = setuptools.command.saveopts:saveopts
sdist = setuptools.command.sdist:sdist
setopt = setuptools.command.setopt:setopt
test = setuptools.command.test:test
upload_docs = setuptools.command.upload_docs:upload_docs

[distutils.setup_keywords]
dependency_links = setuptools.dist:assert_string_list
eager_resources = setuptools.dist:assert_string_list
entry_points = setuptools.dist:check_entry_points
exclude_package_data = setuptools.dist:check_package_data
extras_require = setuptools.dist:check_extras
include_package_data = setuptools.dist:assert_bool
install_requires = setuptools.dist:check_requirements
namespace_packages = setuptools.dist:check_nsp
package_data = setuptools.dist:check_package_data
packages = setuptools.dist:check_packages
python_requires = setuptools.dist:check_specifier
setup_requires = setuptools.dist:check_requirements
test_loader = setuptools.dist:check_importable
test_runner = setuptools.dist:check_importable
test_suite = setuptools.dist:check_test_suite
tests_require = setuptools.dist:check_requirements
use_2to3 = setuptools.dist:invalid_unless_false
zip_safe = setuptools.dist:assert_bool

[egg_info.writers]
PKG-INFO = setuptools.command.egg_info:write_pkg_info
dependency_links.txt = setuptools.command.egg_info:overwrite_arg
depends.txt = setuptools.command.egg_info:warn_depends_obsolete
eager_resources.txt = setuptools.command.egg_info:overwrite_arg
entry_points.txt = setuptools.command.egg_info:write_entries
namespace_packages.txt = setuptools.command.egg_info:overwrite_arg
requires.txt = setuptools.command.egg_info:write_requirements
top_level.txt = setuptools.command.egg_info:write_toplevel_names

[setuptools.finalize_distribution_options]
keywords = setuptools.dist:Distribution._finalize_setup_keywords
parent_finalize = setuptools.dist:_Distribution.finalize_options


--- FILE: .venv/lib/python3.11/site-packages/setuptools-65.5.0.dist-info/top_level.txt ---

_distutils_hack
pkg_resources
setuptools


--- FILE: .venv/lib/python3.11/site-packages/jinja2-3.1.5.dist-info/entry_points.txt ---

[babel.extractors]
jinja2=jinja2.ext:babel_extract[i18n]



--- FILE: .venv/lib/python3.11/site-packages/jinja2-3.1.5.dist-info/LICENSE.txt ---

Copyright 2007 Pallets

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

1.  Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

2.  Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

3.  Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- FILE: .venv/lib/python3.11/site-packages/werkzeug-3.1.3.dist-info/LICENSE.txt ---

Copyright 2007 Pallets

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

1.  Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

2.  Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

3.  Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- FILE: .venv/lib/python3.11/site-packages/python_dotenv-1.0.1.dist-info/entry_points.txt ---

[console_scripts]
dotenv = dotenv.__main__:cli


--- FILE: .venv/lib/python3.11/site-packages/python_dotenv-1.0.1.dist-info/top_level.txt ---

dotenv


--- FILE: .venv/lib/python3.11/site-packages/pip/_vendor/vendor.txt ---

CacheControl==0.12.11  # Make sure to update the license in pyproject.toml for this.
colorama==0.4.5
distlib==0.3.6
distro==1.7.0
msgpack==1.0.4
packaging==21.3
pep517==0.13.0
platformdirs==2.5.2
pyparsing==3.0.9
requests==2.28.1
    certifi==2022.09.24
    chardet==5.0.0
    idna==3.4
    urllib3==1.26.12
rich==12.5.1
    pygments==2.13.0
    typing_extensions==4.4.0
resolvelib==0.8.1
setuptools==44.0.0
six==1.16.0
tenacity==8.1.0
tomli==2.0.1
webencodings==0.5.1


--- FILE: .venv/lib/python3.11/site-packages/anyio-4.8.0.dist-info/entry_points.txt ---

[pytest11]
anyio = anyio.pytest_plugin


--- FILE: .venv/lib/python3.11/site-packages/anyio-4.8.0.dist-info/top_level.txt ---

anyio


--- FILE: .venv/lib/python3.11/site-packages/sniffio-1.3.1.dist-info/top_level.txt ---

sniffio


--- FILE: .venv/lib/python3.11/site-packages/gunicorn-23.0.0.dist-info/entry_points.txt ---

[console_scripts]
gunicorn = gunicorn.app.wsgiapp:run

[paste.server_runner]
main = gunicorn.app.pasterapp:serve


--- FILE: .venv/lib/python3.11/site-packages/gunicorn-23.0.0.dist-info/top_level.txt ---

gunicorn


--- FILE: .venv/lib/python3.11/site-packages/charset_normalizer-3.4.1.dist-info/entry_points.txt ---

[console_scripts]
normalizer = charset_normalizer:cli.cli_detect


--- FILE: .venv/lib/python3.11/site-packages/charset_normalizer-3.4.1.dist-info/top_level.txt ---

charset_normalizer


--- FILE: .venv/lib/python3.11/site-packages/distro-1.9.0.dist-info/entry_points.txt ---

[console_scripts]
distro = distro.distro:main


--- FILE: .venv/lib/python3.11/site-packages/distro-1.9.0.dist-info/top_level.txt ---

distro


--- FILE: .venv/lib/python3.11/site-packages/flask-3.1.0.dist-info/entry_points.txt ---

[console_scripts]
flask=flask.cli:main



--- FILE: .venv/lib/python3.11/site-packages/flask-3.1.0.dist-info/LICENSE.txt ---

Copyright 2010 Pallets

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

1.  Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

2.  Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

3.  Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- FILE: .venv/lib/python3.11/site-packages/pip-22.3.1.dist-info/entry_points.txt ---

[console_scripts]
pip = pip._internal.cli.main:main
pip3 = pip._internal.cli.main:main
pip3.10 = pip._internal.cli.main:main


--- FILE: .venv/lib/python3.11/site-packages/pip-22.3.1.dist-info/top_level.txt ---

pip


--- FILE: .venv/lib/python3.11/site-packages/pip-22.3.1.dist-info/LICENSE.txt ---

Copyright (c) 2008-present The pip developers (see AUTHORS.txt file)

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- FILE: .venv/lib/python3.11/site-packages/setuptools/command/launcher manifest.xml ---

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
    <assemblyIdentity version="1.0.0.0"
                      processorArchitecture="X86"
                      name="%(name)s"
                      type="win32"/>
    <!-- Identify the application security requirements. -->
    <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">
        <security>
            <requestedPrivileges>
                <requestedExecutionLevel level="asInvoker" uiAccess="false"/>
            </requestedPrivileges>
        </security>
    </trustInfo>
</assembly>


--- FILE: .venv/lib/python3.11/site-packages/httpx-0.28.1.dist-info/entry_points.txt ---

[console_scripts]
httpx = httpx:main


--- FILE: .venv/lib/python3.11/site-packages/openai-1.59.7.dist-info/entry_points.txt ---

[console_scripts]
openai = openai.cli:main


--- FILE: .venv/lib/python3.11/site-packages/certifi-2024.12.14.dist-info/top_level.txt ---

certifi


--- FILE: .venv/lib/python3.11/site-packages/MarkupSafe-3.0.2.dist-info/top_level.txt ---

markupsafe


--- FILE: .venv/lib/python3.11/site-packages/MarkupSafe-3.0.2.dist-info/LICENSE.txt ---

Copyright 2010 Pallets

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

1.  Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

2.  Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

3.  Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- FILE: lib/walt2_home_screen.dart ---

// -- lib/walt2_home_screen.dart
import 'package:flutter/material.dart';
import 'api_service.dart';
import 'dart:async';
import 'dart:io';
import 'package:path_provider/path_provider.dart';

class Walt2HomeScreen extends StatefulWidget {
  final String initialMessage;
  final ApiService apiService;
  // final bool loadStoryOnInit; // Removed loadStoryOnInit

  const Walt2HomeScreen({
    super.key,
    required this.initialMessage,
    required this.apiService,
    // this.loadStoryOnInit = false, // Removed loadStoryOnInit
  });

  @override
  _Walt2HomeScreenState createState() => _Walt2HomeScreenState();
}

class _Walt2HomeScreenState extends State<Walt2HomeScreen> {
  List<ChatMessage> _messages = [];
  final TextEditingController _promptController = TextEditingController();
  late ApiService _apiService;
  bool _isAnalyzing = false;
  final ScrollController _scrollController = ScrollController();

  @override
  void initState() {
    super.initState();
    _apiService = widget.apiService;
    _addWaltMessage(widget.initialMessage); // Initial message is now from API response
    // No more conditional loadStory() in initState
  }

  @override
  void dispose() {
    _apiService.closeClient();
    _promptController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  void _addMessage(String text, ChatMessageType type) {
    setState(() {
      _messages.add(ChatMessage(text: text, type: type));
    });
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _scrollController.animateTo(
        _scrollController.position.maxScrollExtent,
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeOut,
      );
    });
  }

  void _addWaltMessage(String text) {
    _addMessage(text, ChatMessageType.walt);
  }

  void _addUserMessage(String text) {
    _addMessage(text, ChatMessageType.user);
  }

  Future<void> _analyzePrompt() async {
    String userInput = _promptController.text.trim();
    if (userInput.isEmpty) return;

    _addUserMessage(userInput);

    setState(() {
      _isAnalyzing = true;
    });

    try {
      final responseMessage = await _apiService.analyzePrompt(userInput);
      _addWaltMessage(responseMessage);
      setState(() {
        _isAnalyzing = false;
      });
      _promptController.clear();
    } catch (e) {
      print("Error in _analyzePrompt: $e");
      _addWaltMessage("Error analyzing prompt: $e");
      setState(() {
        _isAnalyzing = false;
      });
    }
  }

  // --- File Saving and Loading ---

  Future<String> _getFilePath() async {
    final directory = await getApplicationDocumentsDirectory();
    return '${directory.path}/walt_biography.txt'; // Default file name
  }

  Future<void> saveStory() async {
    setState(() {
      _isAnalyzing = true; // Use analyzing state for saving as well for UI feedback
    });
    try {
      final file = File(await _getFilePath());
      String storyText = _messages.where((message) => message.type == ChatMessageType.walt).map((message) => message.text).join("\n\n");
      await file.writeAsString(storyText);
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Story saved locally!")),
      );
    } catch (e) {
      print("Error saving story: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Error saving story: $e")),
      );
    } finally {
      setState(() {
        _isAnalyzing = false;
      });
    }
  }

  Future<void> loadStory() async {
    setState(() {
      _isAnalyzing = true; // Use analyzing state for loading as well for UI feedback
    });
    try {
      final filePath = await _getFilePath(); // Get file path
      print("Loading story from file path: $filePath"); // Debug print file path
      final file = File(filePath);
      if (await file.exists()) {
        print("Story file exists!"); // Debug print if file exists
        final story = await file.readAsString();
        print("Story content loaded: ${story.substring(0, story.length > 200 ? 200 : story.length)}..."); // Debug print loaded content (truncated)
        setState(() {
          _messages.clear();
          _messages.addAll(story.split("\n\n").map((text) => ChatMessage(text: text, type: ChatMessageType.walt)).toList());
          print("Messages after loading: ${_messages.length} messages"); // Debug print message count after loading
        });
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("Story loaded from local file!")),
        );
      } else {
        print("Story file does NOT exist."); // Debug print if file doesn't exist
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("No story file found locally.")),
        );
      }
    } catch (e) {
      print("Error loading story: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Error loading story: $e")),
      );
    } finally {
      setState(() {
        _isAnalyzing = false;
      });
    }
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Walt the auto-Biographer'),
        backgroundColor: Theme.of(context).primaryColor,
        actions: [
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 10.0, vertical: 8.0),
            child: ElevatedButton(
              onPressed: saveStory,
              style: ElevatedButton.styleFrom(
                foregroundColor: Colors.white,
                backgroundColor: Colors.green,
              ),
              child: const Text('Save Story'),
            ),
          ),
        ],
      ),
      body: Stack(
        children: [
          Column(
            children: [
              Expanded(
                child: ListView.builder(
                  controller: _scrollController,
                  itemCount: _messages.length,
                  reverse: true, // Add this line to reverse the list
                  itemBuilder: (context, index) {
                    final message = _messages[index]; // No longer need to reverse index here
                    return ChatBubble(message: message);
                  },
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: _promptController,
                        decoration: const InputDecoration(
                          hintText: "Tell Walt about your life...",
                          border: OutlineInputBorder(),
                        ),
                        onSubmitted: (value) => _analyzePrompt(), // Submit on Enter key
                      ),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton(
                      onPressed: _analyzePrompt,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.yellow,
                        foregroundColor: Colors.grey,
                      ),
                      child: const Text("Submit"),
                    ),
                  ],
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: ElevatedButton(
                  onPressed: _analyzePrompt, // Re-use _analyzePrompt for now
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Theme.of(context).primaryColor,
                    foregroundColor: Colors.white,
                    minimumSize: const Size(double.infinity, 50),
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                  ),
                  child: const Text("Craft Biography"),
                ),
              ),
            ],
          ),
          if (_isAnalyzing)
            Positioned.fill(
              child: Container(
                color: Colors.black.withOpacity(0.5),
                child: const Center(
                  child: CircularProgressIndicator(color: Colors.white),
                ),
              ),
            ),
        ],
      ),
    );
  }
}

enum ChatMessageType { walt, user }

class ChatMessage {
  final String text;
  final ChatMessageType type;
  ChatMessage({required this.text, required this.type});
}

class ChatBubble extends StatelessWidget {
  final ChatMessage message;

  const ChatBubble({super.key, required this.message});

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 10.0, horizontal: 16.0),
      alignment: message.type == ChatMessageType.walt ? Alignment.topLeft : Alignment.topRight,
      child: Column(
        crossAxisAlignment: message.type == ChatMessageType.walt ? CrossAxisAlignment.start : CrossAxisAlignment.end,
        children: [
          Container(
            padding: const EdgeInsets.all(12.0),
            decoration: BoxDecoration(
              color: message.type == ChatMessageType.walt ? Colors.blue[100] : Colors.yellow[200],
              borderRadius: BorderRadius.circular(12.0),
            ),
            child: Text(
              message.text,
              style: const TextStyle(color: Colors.black87),
            ),
          ),
        ],
      ),
    );
  }
}
// -- lib/walt2_home_screen.dart


--- FILE: lib/main.dart ---

import 'package:flutter/material.dart';
import 'walt2_splash_screen.dart';
import 'api_service.dart'; // Import ApiService

void main() {
  runApp(const Walt2App());
}

class Walt2App extends StatefulWidget { // Make Walt2App StatefulWidget to manage ApiService lifecycle
  const Walt2App({super.key});

  @override
  Walt2AppState createState() => Walt2AppState();
}

class Walt2AppState extends State<Walt2App> {
  late final ApiService apiService; // ApiService instance at app level

  @override
  void initState() {
    super.initState();
    apiService = ApiService(baseUrl: "https://virtual-lab-staging-jeff-b43cbb10d55f.herokuapp.com"); // Initialize ApiService here
  }

  // @override  <-- COMMENT OUT THE ENTIRE dispose() METHOD
  // void dispose() {
  //   apiService.closeClient(); // Dispose ApiService when the entire app is disposed
  //   super.dispose();
  // }


  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Walt2 Biographer',
      theme: ThemeData(
        primaryColor: const Color(0xFF007AFF),
        scaffoldBackgroundColor: const Color(0xFFF7F7F7),
        textTheme: const TextTheme(
          bodyLarge: TextStyle(color: Color(0xFF333333)),
        ),
      ),
      home: Walt2SplashScreen(apiService: apiService), // Pass ApiService to SplashScreen // REMOVED 'const' HERE
    );
  }
}


--- FILE: lib/api_service.dart ---

// -- lib/api_service.dart
import 'package:http/http.dart' as http;
import 'dart:convert';

class ApiService {
  final String baseUrl;
  final http.Client client;
  String? csrfToken;
  String? sessionCookie;

  ApiService({required this.baseUrl, http.Client? httpClient}) : client = httpClient ?? http.Client();

  Future<void> fetchCsrfToken() async {
    try {
      final response = await client.get(Uri.parse('$baseUrl/walt2'));
      if (response.statusCode == 200) {
        final cookies = response.headers['set-cookie'];
        if (cookies != null) {
          final csrfMatch = RegExp(r'csrf_token=([^;]+)').firstMatch(cookies);
          final sessionMatch = RegExp(r'session=([^;]+)').firstMatch(cookies);
          csrfToken = csrfMatch?.group(1);
          sessionCookie = sessionMatch?.group(1);
        }
      }
    } catch (e) {
      print("Error fetching CSRF token: $e");
      throw Exception('Failed to fetch CSRF token'); // Propagate the error
    }
  }

  Future<String> getNewBioInitialMessage() async {
    try {
      final response = await client.get(
        Uri.parse('$baseUrl/api/walt2/new_bio'),
        headers: {"Content-Type": "application/json"},
      );

      if (response.statusCode != 200) {
        throw Exception("Server error: ${response.statusCode}");
      }

      if (response.body.isEmpty) {
        throw Exception("Empty response from server");
      }

      final data = jsonDecode(response.body);
      if (data['error'] != null) {
        throw Exception("Server error: ${data['error']}");
      }
      return data['initial_message'] ?? "No response provided";
    } catch (e) {
      print("Error in getNewBioInitialMessage: $e");
      throw Exception('Failed to get initial message: $e'); // Re-throw the exception
    }
  }


  Future<String> analyzePrompt(String prompt) async {
    try {
      final response = await client.post(
        Uri.parse('$baseUrl/api/walt2/analyze'),
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
          "X-CSRFToken": csrfToken ?? "",
          "Cookie": "session=$sessionCookie",
          "Referer": "$baseUrl/walt2/",
        },
        body: "user_query=${Uri.encodeComponent(prompt)}",
      );

      if (response.statusCode != 200) {
        throw Exception("Server error: ${response.statusCode}");
      }

      if (response.body.isEmpty) {
        throw Exception("Empty response from server");
      }
      final responseData = jsonDecode(response.body);
       if (responseData['error'] != null) {
        throw Exception("Server error: ${responseData['error']}");
      }
      return responseData['response'] ?? "No response provided";
    } catch (e) {
      print("Error in analyzePrompt: $e");
      throw Exception('Failed to analyze prompt: $e'); // Re-throw the exception
    }
  }

  Future<String> continueBio(String checkpointData) async { // New continueBio function
    try {
      final response = await client.post(
        Uri.parse('$baseUrl/api/walt2/continue_bio'), // Use continue_bio API endpoint
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
          "X-CSRFToken": csrfToken ?? "",
          "Cookie": "session=$sessionCookie",
          "Referer": "$baseUrl/walt2/",
        },
        body: "checkpoint_data=${Uri.encodeComponent(checkpointData)}", // Send checkpoint_data in body
      );

      if (response.statusCode != 200) {
        throw Exception("Server error in continueBio: ${response.statusCode} - ${response.body.substring(0, 200)}...");
      }

      if (response.body.isEmpty) {
        throw Exception("Empty response from server in continueBio");
      }
      final responseData = jsonDecode(response.body);
       if (responseData['error'] != null) {
        throw Exception("Server error in continueBio: ${responseData['error']}");
      }
      return responseData['initial_message'] ?? "No response provided"; // Extract initial_message
    } catch (e) {
      print("Error in continueBio: $e");
      throw Exception('Failed to continue bio: $e'); // Re-throw the exception
    }
  }


  void closeClient() {
    client.close();
  }
}
// -- lib/api_service.dart


--- FILE: lib/walt2_splash_screen.dart ---

// -- lib/walt2_splash_screen.dart
import 'package:flutter/material.dart';
import 'walt2_home_screen.dart';
import 'api_service.dart';
import 'dart:io'; // Import dart:io for File
import 'package:path_provider/path_provider.dart'; // Import path_provider

class Walt2SplashScreen extends StatefulWidget {
  final ApiService apiService;

  const Walt2SplashScreen({super.key, required this.apiService});

  @override
  _Walt2SplashScreenState createState() => _Walt2SplashScreenState();
}

class _Walt2SplashScreenState extends State<Walt2SplashScreen> {
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _fetchInitialData();
  }

  ApiService get _apiService => widget.apiService;

  Future<void> _fetchInitialData() async {
    setState(() {
      _isLoading = true;
    });
    try {
      await _apiService.fetchCsrfToken();
      setState(() {
        _isLoading = false;
      });
    } catch (e) {
      print("Error fetching initial data (CSRF): $e");
      setState(() {
        _isLoading = false;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Error initializing app: $e")),
      );
    }
  }

  void _beginNewBio() async {
    setState(() {
      _isLoading = true;
    });
    try {
      final initialMessage = await _apiService.getNewBioInitialMessage();
      setState(() {
        _isLoading = false;
      });
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => Walt2HomeScreen(
            initialMessage: initialMessage,
            apiService: _apiService,
          ),
        ),
      );
    } catch (e) {
      print("Error in _beginNewBio: $e");
      setState(() {
        _isLoading = false;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Error starting new bio: $e")),
      );
    }
  }

  void _loadStory() async {
    setState(() {
      _isLoading = true;
    });
    try {
      final filePath = await _getFilePath();
      final file = File(filePath);
      if (await file.exists()) {
        final storyText = await file.readAsString(); // Load story text

        final continueMessage = await _apiService.continueBio(storyText); // Call continueBio API

        setState(() {
          _isLoading = false;
        });
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => Walt2HomeScreen(
              initialMessage: continueMessage, // Use initial message from API response
              apiService: _apiService,
              // **CHANGE IS HERE: REMOVE loadStoryOnInit: false,**  <--  Ensure this line and below are exactly as shown (commented out)
            ),
          ),
        );
      } else {
        setState(() {
          _isLoading = false;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("No story file found locally.")),
        );
      }
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      print("Error in _loadStory: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Error loading story: $e")),
      );
    }
  }

  Future<String> _getFilePath() async { // Moved _getFilePath to splash screen as it's only used here now
    final directory = await getApplicationDocumentsDirectory();
    return '${directory.path}/walt_biography.txt'; // Default file name
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Walt the auto-Biographer'),
        backgroundColor: Theme.of(context).primaryColor,
        centerTitle: true,
      ),
      body: Stack(
        children: [
          Center(
            child: Padding(
              padding: const EdgeInsets.all(20.0),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Image.asset(
                    'assets/images/walt.png',
                    width: 200,
                    height: 200,
                    fit: BoxFit.contain,
                  ),
                  const SizedBox(height: 20),
                  const Text(
                    "Walt, Your AI Biographer",
                    style: TextStyle(
                      color: Color(0xFF007AFF),
                      fontSize: 32,
                      fontWeight: FontWeight.w600,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 20),
                  const Text(
                    "I want to write your unique story!",
                    style: TextStyle(
                      color: Color(0xFF555555),
                      fontSize: 18,
                      fontStyle: FontStyle.italic,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 40),
                  SizedBox(
                    width: 300,
                    child: ElevatedButton(
                      onPressed: _beginNewBio,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFF007AFF),
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                      ),
                      child: const Text("Begin your biography"),
                    ),
                  ),
                  const SizedBox(height: 20),
                  SizedBox(
                    width: 300,
                    child: ElevatedButton(
                      onPressed: _loadStory,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFF007AFF),
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                      ),
                      child: const Text("Load Saved Story"),
                    ),
                  ),
                ],
              ),
            ),
          ),
          if (_isLoading)
            Positioned.fill(
              child: Container(
                color: Colors.black.withOpacity(0.5),
                child: const Center(
                  child: CircularProgressIndicator(color: Colors.white),
                ),
              ),
            ),
        ],
      ),
    );
  }
}
// -- lib/walt2_splash_screen.dart


--- FILE: .dart_tool/package_config.json ---

{
  "configVersion": 2,
  "packages": [
    {
      "name": "async",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/async-2.12.0",
      "packageUri": "lib/",
      "languageVersion": "3.4"
    },
    {
      "name": "boolean_selector",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/boolean_selector-2.1.2",
      "packageUri": "lib/",
      "languageVersion": "3.1"
    },
    {
      "name": "characters",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/characters-1.4.0",
      "packageUri": "lib/",
      "languageVersion": "3.4"
    },
    {
      "name": "clock",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/clock-1.1.2",
      "packageUri": "lib/",
      "languageVersion": "3.4"
    },
    {
      "name": "collection",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/collection-1.19.1",
      "packageUri": "lib/",
      "languageVersion": "3.4"
    },
    {
      "name": "cupertino_icons",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/cupertino_icons-1.0.8",
      "packageUri": "lib/",
      "languageVersion": "3.1"
    },
    {
      "name": "fake_async",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/fake_async-1.3.2",
      "packageUri": "lib/",
      "languageVersion": "3.3"
    },
    {
      "name": "ffi",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/ffi-2.1.4",
      "packageUri": "lib/",
      "languageVersion": "3.7"
    },
    {
      "name": "flutter",
      "rootUri": "file:///opt/homebrew/Caskroom/flutter/3.29.1/flutter/packages/flutter",
      "packageUri": "lib/",
      "languageVersion": "3.7"
    },
    {
      "name": "flutter_lints",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/flutter_lints-5.0.0",
      "packageUri": "lib/",
      "languageVersion": "3.5"
    },
    {
      "name": "flutter_test",
      "rootUri": "file:///opt/homebrew/Caskroom/flutter/3.29.1/flutter/packages/flutter_test",
      "packageUri": "lib/",
      "languageVersion": "3.7"
    },
    {
      "name": "http",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/http-1.3.0",
      "packageUri": "lib/",
      "languageVersion": "3.4"
    },
    {
      "name": "http_parser",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/http_parser-4.1.2",
      "packageUri": "lib/",
      "languageVersion": "3.4"
    },
    {
      "name": "leak_tracker",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/leak_tracker-10.0.8",
      "packageUri": "lib/",
      "languageVersion": "3.2"
    },
    {
      "name": "leak_tracker_flutter_testing",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/leak_tracker_flutter_testing-3.0.9",
      "packageUri": "lib/",
      "languageVersion": "3.2"
    },
    {
      "name": "leak_tracker_testing",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/leak_tracker_testing-3.0.1",
      "packageUri": "lib/",
      "languageVersion": "3.2"
    },
    {
      "name": "lints",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/lints-5.1.1",
      "packageUri": "lib/",
      "languageVersion": "3.6"
    },
    {
      "name": "matcher",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/matcher-0.12.17",
      "packageUri": "lib/",
      "languageVersion": "3.4"
    },
    {
      "name": "material_color_utilities",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/material_color_utilities-0.11.1",
      "packageUri": "lib/",
      "languageVersion": "2.17"
    },
    {
      "name": "meta",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/meta-1.16.0",
      "packageUri": "lib/",
      "languageVersion": "2.12"
    },
    {
      "name": "path",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/path-1.9.1",
      "packageUri": "lib/",
      "languageVersion": "3.4"
    },
    {
      "name": "path_provider",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/path_provider-2.1.5",
      "packageUri": "lib/",
      "languageVersion": "3.4"
    },
    {
      "name": "path_provider_android",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/path_provider_android-2.2.16",
      "packageUri": "lib/",
      "languageVersion": "3.6"
    },
    {
      "name": "path_provider_foundation",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/path_provider_foundation-2.4.1",
      "packageUri": "lib/",
      "languageVersion": "3.3"
    },
    {
      "name": "path_provider_linux",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/path_provider_linux-2.2.1",
      "packageUri": "lib/",
      "languageVersion": "2.19"
    },
    {
      "name": "path_provider_platform_interface",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/path_provider_platform_interface-2.1.2",
      "packageUri": "lib/",
      "languageVersion": "3.0"
    },
    {
      "name": "path_provider_windows",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/path_provider_windows-2.3.0",
      "packageUri": "lib/",
      "languageVersion": "3.2"
    },
    {
      "name": "platform",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/platform-3.1.6",
      "packageUri": "lib/",
      "languageVersion": "3.2"
    },
    {
      "name": "plugin_platform_interface",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/plugin_platform_interface-2.1.8",
      "packageUri": "lib/",
      "languageVersion": "3.0"
    },
    {
      "name": "sky_engine",
      "rootUri": "file:///opt/homebrew/Caskroom/flutter/3.29.1/flutter/bin/cache/pkg/sky_engine",
      "packageUri": "lib/",
      "languageVersion": "3.7"
    },
    {
      "name": "source_span",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/source_span-1.10.1",
      "packageUri": "lib/",
      "languageVersion": "3.1"
    },
    {
      "name": "stack_trace",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/stack_trace-1.12.1",
      "packageUri": "lib/",
      "languageVersion": "3.4"
    },
    {
      "name": "stream_channel",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/stream_channel-2.1.4",
      "packageUri": "lib/",
      "languageVersion": "3.3"
    },
    {
      "name": "string_scanner",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/string_scanner-1.4.1",
      "packageUri": "lib/",
      "languageVersion": "3.1"
    },
    {
      "name": "term_glyph",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/term_glyph-1.2.2",
      "packageUri": "lib/",
      "languageVersion": "3.1"
    },
    {
      "name": "test_api",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/test_api-0.7.4",
      "packageUri": "lib/",
      "languageVersion": "3.5"
    },
    {
      "name": "typed_data",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/typed_data-1.4.0",
      "packageUri": "lib/",
      "languageVersion": "3.5"
    },
    {
      "name": "vector_math",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/vector_math-2.1.4",
      "packageUri": "lib/",
      "languageVersion": "2.14"
    },
    {
      "name": "vm_service",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/vm_service-14.3.1",
      "packageUri": "lib/",
      "languageVersion": "3.3"
    },
    {
      "name": "web",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/web-1.1.1",
      "packageUri": "lib/",
      "languageVersion": "3.4"
    },
    {
      "name": "xdg_directories",
      "rootUri": "file:///Users/jeffcurie/.pub-cache/hosted/pub.dev/xdg_directories-1.1.0",
      "packageUri": "lib/",
      "languageVersion": "3.3"
    },
    {
      "name": "walt_interview_app",
      "rootUri": "../",
      "packageUri": "lib/",
      "languageVersion": "3.7"
    }
  ],
  "generated": "2025-03-13T23:57:36.646595Z",
  "generator": "pub",
  "generatorVersion": "3.7.0",
  "flutterRoot": "file:///opt/homebrew/Caskroom/flutter/3.29.1/flutter",
  "flutterVersion": "3.29.1",
  "pubCache": "file:///Users/jeffcurie/.pub-cache"
}


--- FILE: .dart_tool/flutter_build/dart_plugin_registrant.dart ---

//
// Generated file. Do not edit.
// This file is generated from template in file `flutter_tools/lib/src/flutter_plugins.dart`.
//

// @dart = 3.7

import 'dart:io'; // flutter_ignore: dart_io_import.
import 'package:path_provider_android/path_provider_android.dart';
import 'package:path_provider_foundation/path_provider_foundation.dart';
import 'package:path_provider_linux/path_provider_linux.dart';
import 'package:path_provider_foundation/path_provider_foundation.dart';
import 'package:path_provider_windows/path_provider_windows.dart';

@pragma('vm:entry-point')
class _PluginRegistrant {

  @pragma('vm:entry-point')
  static void register() {
    if (Platform.isAndroid) {
      try {
        PathProviderAndroid.registerWith();
      } catch (err) {
        print(
          '`path_provider_android` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isIOS) {
      try {
        PathProviderFoundation.registerWith();
      } catch (err) {
        print(
          '`path_provider_foundation` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isLinux) {
      try {
        PathProviderLinux.registerWith();
      } catch (err) {
        print(
          '`path_provider_linux` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isMacOS) {
      try {
        PathProviderFoundation.registerWith();
      } catch (err) {
        print(
          '`path_provider_foundation` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isWindows) {
      try {
        PathProviderWindows.registerWith();
      } catch (err) {
        print(
          '`path_provider_windows` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    }
  }
}


--- FILE: .dart_tool/flutter_build/f645642020618fdff561f725e0441523/outputs.json ---

["/Users/jeffcurie/Dropbox (Personal)/Mac/Documents/Projects/walt_mobile/walt_interview_app/build/ios/Debug-iphonesimulator/Flutter.framework/Flutter","/Users/jeffcurie/Dropbox (Personal)/Mac/Documents/Projects/walt_mobile/walt_interview_app/build/ios/Debug-iphonesimulator/App.framework/flutter_assets/vm_snapshot_data","/Users/jeffcurie/Dropbox (Personal)/Mac/Documents/Projects/walt_mobile/walt_interview_app/build/ios/Debug-iphonesimulator/App.framework/flutter_assets/isolate_snapshot_data","/Users/jeffcurie/Dropbox (Personal)/Mac/Documents/Projects/walt_mobile/walt_interview_app/build/ios/Debug-iphonesimulator/App.framework/flutter_assets/kernel_blob.bin","/Users/jeffcurie/Dropbox (Personal)/Mac/Documents/Projects/walt_mobile/walt_interview_app/build/ios/Debug-iphonesimulator/App.framework/App","/Users/jeffcurie/Dropbox (Personal)/Mac/Documents/Projects/walt_mobile/walt_interview_app/build/ios/Debug-iphonesimulator/App.framework/Info.plist","/Users/jeffcurie/Dropbox (Personal)/Mac/Documents/Projects/walt_mobile/walt_interview_app/build/ios/Debug-iphonesimulator/App.framework/flutter_assets/assets/images/walt.png","/Users/jeffcurie/Dropbox (Personal)/Mac/Documents/Projects/walt_mobile/walt_interview_app/build/ios/Debug-iphonesimulator/App.framework/flutter_assets/packages/cupertino_icons/assets/CupertinoIcons.ttf","/Users/jeffcurie/Dropbox (Personal)/Mac/Documents/Projects/walt_mobile/walt_interview_app/build/ios/Debug-iphonesimulator/App.framework/flutter_assets/fonts/MaterialIcons-Regular.otf","/Users/jeffcurie/Dropbox (Personal)/Mac/Documents/Projects/walt_mobile/walt_interview_app/build/ios/Debug-iphonesimulator/App.framework/flutter_assets/shaders/ink_sparkle.frag","/Users/jeffcurie/Dropbox (Personal)/Mac/Documents/Projects/walt_mobile/walt_interview_app/build/ios/Debug-iphonesimulator/App.framework/flutter_assets/AssetManifest.json","/Users/jeffcurie/Dropbox (Personal)/Mac/Documents/Projects/walt_mobile/walt_interview_app/build/ios/Debug-iphonesimulator/App.framework/flutter_assets/AssetManifest.bin","/Users/jeffcurie/Dropbox (Personal)/Mac/Documents/Projects/walt_mobile/walt_interview_app/build/ios/Debug-iphonesimulator/App.framework/flutter_assets/FontManifest.json","/Users/jeffcurie/Dropbox (Personal)/Mac/Documents/Projects/walt_mobile/walt_interview_app/build/ios/Debug-iphonesimulator/App.framework/flutter_assets/NOTICES.Z","/Users/jeffcurie/Dropbox (Personal)/Mac/Documents/Projects/walt_mobile/walt_interview_app/build/ios/Debug-iphonesimulator/App.framework/flutter_assets/NativeAssetsManifest.json"]

--- FILE: .dart_tool/flutter_build/f645642020618fdff561f725e0441523/dart_build_result.json ---

{"dependencies":[],"code_assets":[]}

--- FILE: .dart_tool/flutter_build/f645642020618fdff561f725e0441523/native_assets.json ---

{"format-version":[1,0,0],"native-assets":{}}

--- FILE: .dart_tool/dartpad/web_plugin_registrant.dart ---

// Flutter web plugin registrant file.
//
// Generated file. Do not edit.
//

// ignore_for_file: type=lint

void registerPlugins() {}


--- FILE: windows/CMakeLists.txt ---

# Project-level configuration.
cmake_minimum_required(VERSION 3.14)
project(walt_interview_app LANGUAGES CXX)

# The name of the executable created for the application. Change this to change
# the on-disk name of your application.
set(BINARY_NAME "walt_interview_app")

# Explicitly opt in to modern CMake behaviors to avoid warnings with recent
# versions of CMake.
cmake_policy(VERSION 3.14...3.25)

# Define build configuration option.
get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(IS_MULTICONFIG)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Profile;Release"
    CACHE STRING "" FORCE)
else()
  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Debug" CACHE
      STRING "Flutter build mode" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
      "Debug" "Profile" "Release")
  endif()
endif()
# Define settings for the Profile build mode.
set(CMAKE_EXE_LINKER_FLAGS_PROFILE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set(CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_PROFILE "${CMAKE_C_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_PROFILE "${CMAKE_CXX_FLAGS_RELEASE}")

# Use Unicode for all projects.
add_definitions(-DUNICODE -D_UNICODE)

# Compilation settings that should be applied to most targets.
#
# Be cautious about adding new options here, as plugins use this function by
# default. In most cases, you should add new options to specific targets instead
# of modifying this function.
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_17)
  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd"4100")
  target_compile_options(${TARGET} PRIVATE /EHsc)
  target_compile_definitions(${TARGET} PRIVATE "_HAS_EXCEPTIONS=0")
  target_compile_definitions(${TARGET} PRIVATE "$<$<CONFIG:Debug>:_DEBUG>")
endfunction()

# Flutter library and tool build rules.
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

# Application build; see runner/CMakeLists.txt.
add_subdirectory("runner")


# Generated plugin build rules, which manage building the plugins and adding
# them to the application.
include(flutter/generated_plugins.cmake)


# === Installation ===
# Support files are copied into place next to the executable, so that it can
# run in place. This is done instead of making a separate bundle (as on Linux)
# so that building and running from within Visual Studio will work.
set(BUILD_BUNDLE_DIR "$<TARGET_FILE_DIR:${BINARY_NAME}>")
# Make the "install" step default, as it's required to run.
set(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}")

install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

if(PLUGIN_BUNDLED_LIBRARIES)
  install(FILES "${PLUGIN_BUNDLED_LIBRARIES}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()

# Copy the native assets provided by the build.dart from all packages.
set(NATIVE_ASSETS_DIR "${PROJECT_BUILD_DIR}native_assets/windows/")
install(DIRECTORY "${NATIVE_ASSETS_DIR}"
   DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
   COMPONENT Runtime)

# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

# Install the AOT library on non-Debug builds only.
install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  CONFIGURATIONS Profile;Release
  COMPONENT Runtime)


--- FILE: windows/runner/CMakeLists.txt ---

cmake_minimum_required(VERSION 3.14)
project(runner LANGUAGES CXX)

# Define the application target. To change its name, change BINARY_NAME in the
# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer
# work.
#
# Any new source files that you add to the application should be added here.
add_executable(${BINARY_NAME} WIN32
  "flutter_window.cpp"
  "main.cpp"
  "utils.cpp"
  "win32_window.cpp"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
  "Runner.rc"
  "runner.exe.manifest"
)

# Apply the standard set of build settings. This can be removed for applications
# that need different build settings.
apply_standard_settings(${BINARY_NAME})

# Add preprocessor definitions for the build version.
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION=\"${FLUTTER_VERSION}\"")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}")

# Disable Windows macros that collide with C++ standard library functions.
target_compile_definitions(${BINARY_NAME} PRIVATE "NOMINMAX")

# Add dependency libraries and include directories. Add any application-specific
# dependencies here.
target_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)
target_link_libraries(${BINARY_NAME} PRIVATE "dwmapi.lib")
target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")

# Run the Flutter tool portions of the build. This must not be removed.
add_dependencies(${BINARY_NAME} flutter_assemble)


--- FILE: windows/flutter/CMakeLists.txt ---

# This file controls Flutter-level build steps. It should not be edited.
cmake_minimum_required(VERSION 3.14)

set(EPHEMERAL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/ephemeral")

# Configuration provided via flutter tool.
include(${EPHEMERAL_DIR}/generated_config.cmake)

# TODO: Move the rest of this into files in ephemeral. See
# https://github.com/flutter/flutter/issues/57146.
set(WRAPPER_ROOT "${EPHEMERAL_DIR}/cpp_client_wrapper")

# Set fallback configurations for older versions of the flutter tool.
if (NOT DEFINED FLUTTER_TARGET_PLATFORM)
  set(FLUTTER_TARGET_PLATFORM "windows-x64")
endif()

# === Flutter Library ===
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/flutter_windows.dll")

# Published to parent scope for install step.
set(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)
set(FLUTTER_ICU_DATA_FILE "${EPHEMERAL_DIR}/icudtl.dat" PARENT_SCOPE)
set(PROJECT_BUILD_DIR "${PROJECT_DIR}/build/" PARENT_SCOPE)
set(AOT_LIBRARY "${PROJECT_DIR}/build/windows/app.so" PARENT_SCOPE)

list(APPEND FLUTTER_LIBRARY_HEADERS
  "flutter_export.h"
  "flutter_windows.h"
  "flutter_messenger.h"
  "flutter_plugin_registrar.h"
  "flutter_texture_registrar.h"
)
list(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND "${EPHEMERAL_DIR}/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}.lib")
add_dependencies(flutter flutter_assemble)

# === Wrapper ===
list(APPEND CPP_WRAPPER_SOURCES_CORE
  "core_implementations.cc"
  "standard_codec.cc"
)
list(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND "${WRAPPER_ROOT}/")
list(APPEND CPP_WRAPPER_SOURCES_PLUGIN
  "plugin_registrar.cc"
)
list(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND "${WRAPPER_ROOT}/")
list(APPEND CPP_WRAPPER_SOURCES_APP
  "flutter_engine.cc"
  "flutter_view_controller.cc"
)
list(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND "${WRAPPER_ROOT}/")

# Wrapper sources needed for a plugin.
add_library(flutter_wrapper_plugin STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
)
apply_standard_settings(flutter_wrapper_plugin)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  POSITION_INDEPENDENT_CODE ON)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  CXX_VISIBILITY_PRESET hidden)
target_link_libraries(flutter_wrapper_plugin PUBLIC flutter)
target_include_directories(flutter_wrapper_plugin PUBLIC
  "${WRAPPER_ROOT}/include"
)
add_dependencies(flutter_wrapper_plugin flutter_assemble)

# Wrapper sources needed for the runner.
add_library(flutter_wrapper_app STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_APP}
)
apply_standard_settings(flutter_wrapper_app)
target_link_libraries(flutter_wrapper_app PUBLIC flutter)
target_include_directories(flutter_wrapper_app PUBLIC
  "${WRAPPER_ROOT}/include"
)
add_dependencies(flutter_wrapper_app flutter_assemble)

# === Flutter tool backend ===
# _phony_ is a non-existent file to force this command to run every time,
# since currently there's no way to get a full input/output list from the
# flutter tool.
set(PHONY_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/_phony_")
set_source_files_properties("${PHONY_OUTPUT}" PROPERTIES SYMBOLIC TRUE)
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}
    ${CPP_WRAPPER_SOURCES_APP}
    ${PHONY_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat"
      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
  ${CPP_WRAPPER_SOURCES_APP}
)


--- FILE: .idea/workspace.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="FileEditorManager">
    <leaf>
      <file leaf-file-name="main.dart" pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/lib/main.dart">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="0">
              <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="ToolWindowManager">
    <editor active="true" />
    <layout>
      <window_info id="Project" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="0" side_tool="false" content_ui="combo" />
    </layout>
  </component>
  <component name="ProjectView">
    <navigator currentView="ProjectPane" proportions="" version="1">
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <option name="show-excluded-files" value="false" />
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="dart.analysis.tool.window.force.activate" value="true" />
    <property name="show.migrate.to.gradle.popup" value="false" />
  </component>
</project>


--- FILE: .idea/modules.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/walt_interview_app.iml" filepath="$PROJECT_DIR$/walt_interview_app.iml" />
      <module fileurl="file://$PROJECT_DIR$/android/walt_interview_app_android.iml" filepath="$PROJECT_DIR$/android/walt_interview_app_android.iml" />
    </modules>
  </component>
</project>


--- FILE: .idea/runConfigurations/main_dart.xml ---

<component name="ProjectRunConfigurationManager">
  <configuration default="false" name="main.dart" type="FlutterRunConfigurationType" factoryName="Flutter">
    <option name="filePath" value="$PROJECT_DIR$/lib/main.dart" />
    <method />
  </configuration>
</component>

--- FILE: .idea/libraries/Dart_SDK.xml ---

<component name="libraryTable">
  <library name="Dart SDK">
    <CLASSES>
      <root url="file:///opt/homebrew/Caskroom/flutter/3.29.1/flutter/bin/cache/dart-sdk/lib/async" />
      <root url="file:///opt/homebrew/Caskroom/flutter/3.29.1/flutter/bin/cache/dart-sdk/lib/collection" />
      <root url="file:///opt/homebrew/Caskroom/flutter/3.29.1/flutter/bin/cache/dart-sdk/lib/convert" />
      <root url="file:///opt/homebrew/Caskroom/flutter/3.29.1/flutter/bin/cache/dart-sdk/lib/core" />
      <root url="file:///opt/homebrew/Caskroom/flutter/3.29.1/flutter/bin/cache/dart-sdk/lib/developer" />
      <root url="file:///opt/homebrew/Caskroom/flutter/3.29.1/flutter/bin/cache/dart-sdk/lib/html" />
      <root url="file:///opt/homebrew/Caskroom/flutter/3.29.1/flutter/bin/cache/dart-sdk/lib/io" />
      <root url="file:///opt/homebrew/Caskroom/flutter/3.29.1/flutter/bin/cache/dart-sdk/lib/isolate" />
      <root url="file:///opt/homebrew/Caskroom/flutter/3.29.1/flutter/bin/cache/dart-sdk/lib/math" />
      <root url="file:///opt/homebrew/Caskroom/flutter/3.29.1/flutter/bin/cache/dart-sdk/lib/mirrors" />
      <root url="file:///opt/homebrew/Caskroom/flutter/3.29.1/flutter/bin/cache/dart-sdk/lib/typed_data" />
    </CLASSES>
    <JAVADOC />
    <SOURCES />
  </library>
</component>

--- FILE: .idea/libraries/KotlinJavaRuntime.xml ---

<component name="libraryTable">
  <library name="KotlinJavaRuntime">
    <CLASSES>
      <root url="jar://$KOTLIN_BUNDLED$/lib/kotlin-stdlib.jar!/" />
      <root url="jar://$KOTLIN_BUNDLED$/lib/kotlin-reflect.jar!/" />
      <root url="jar://$KOTLIN_BUNDLED$/lib/kotlin-test.jar!/" />
    </CLASSES>
    <JAVADOC />
    <SOURCES>
      <root url="jar://$KOTLIN_BUNDLED$/lib/kotlin-stdlib-sources.jar!/" />
      <root url="jar://$KOTLIN_BUNDLED$/lib/kotlin-reflect-sources.jar!/" />
      <root url="jar://$KOTLIN_BUNDLED$/lib/kotlin-test-sources.jar!/" />
    </SOURCES>
  </library>
</component>


--- ASSET FILES ---

File: assets/.DS_Store, Mime Type: unknown
File: assets/images/walt.png, Mime Type: image/png
