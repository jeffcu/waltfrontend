

--- FILE: test_openai.py ---

from flask import Blueprint, request, jsonify
import openai
import logging

api_test_bp = Blueprint('api_test', __name__)
logging.basicConfig(level=logging.DEBUG)

def format_api_response(response_text):
    """Format response for structured readability."""
    formatted_text = response_text.replace("**", "")  # Remove double asterisks
    formatted_text = formatted_text.replace("\n", "<br>")  # Line breaks
    formatted_text = formatted_text.replace("- ", "<li>") + "</li>"  # Bullets
    formatted_text = formatted_text.replace("1. ", "<li><strong>1.</strong> ") + "</li>"  # Numbering
    return f"<strong>Analysis Report:</strong><br><ul>{formatted_text}</ul>"

@api_test_bp.route('/api_test', methods=['POST'])
def api_test():
    """Handles OpenAI API requests for the API Test popup."""
    data = request.json
    user_query = data.get('query', 'Who invented velcro?')

    if not user_query.strip():
        return jsonify({"response": "Error: Query is empty"}), 400

    try:
        client = openai.Client()
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are an API testing assistant."},
                {"role": "user", "content": user_query}
            ]
        )
        api_response = response.choices[0].message.content.strip()
        return jsonify({"response": format_api_response(api_response)})  # Apply formatting
    except Exception as e:
        logging.error(f"OpenAI API call failed: {str(e)}")
        return jsonify({"response": f"Error: {str(e)}"}), 500


--- FILE: combine.py ---

import os
import mimetypes

def combine_files(base_directory, output_file):
    """Combines specific file types, excluding the .venv directory,
       and lists static files in the static directory."""

    text_extensions = ['.py', '.html', '.txt', '.env', '.json', '.css', '.js', '.xml', 'Procfile']
    static_dir = "static"
    venv_dir = ".venv"  # Name of your virtual environment directory

    static_files = []
    with open(output_file, 'w', encoding='utf-8') as outfile:
        # Traverse the entire directory tree
        for root, _, files in os.walk(base_directory):
            for filename in files:
                filepath = os.path.join(root, filename) # Correct file path

                relative_path = os.path.relpath(filepath, base_directory) # Relative to project root
                root_path = os.path.relpath(root, base_directory)
                #filename=os.path.basename(filepath) #Get File Name #Unnecessary now

                # Skip .git directory, and .venv directory
                if '.git' in relative_path.split(os.sep) or venv_dir in root_path.split(os.sep):
                    continue

                _, ext = os.path.splitext(filename) #Get extension
                if ext in text_extensions or filename == 'Procfile':
                    try:
                        with open(filepath, 'r', encoding='utf-8') as infile:
                            content = infile.read()
                            outfile.write(f"\n\n--- FILE: {relative_path} ---\n\n")
                            outfile.write(content)
                    except Exception as e:
                        print(f"Error reading {filepath}: {e}")
                # Handle static files if the file is directly under static, or a folder under static
                elif static_dir in relative_path.split(os.sep):
                    # Handle static files
                    file_mime_type, _ = mimetypes.guess_type(filepath)
                    static_files.append((relative_path, file_mime_type or 'unknown'))

        # Write the list of static files to the end of the output file
        outfile.write("\n\n--- STATIC FILES ---\n\n")
        for path, mime_type in static_files:
            outfile.write(f"File: {path}, Mime Type: {mime_type}\n")


if __name__ == "__main__":
    base_directory = "."  # Project Root - where the script runs
    output_file = "combined_project.txt"
    combine_files(base_directory, output_file)
    print(f"Combined files into {output_file}")


--- FILE: combined_project.txt ---



--- FILE: requirements.txt ---

gunicorn
openai>=1.0.0
Flask
flask-wtf
python-dotenv
PyPDF2
weasyprint
pytest
pytest-mock
werkzeug
flask-limiter
redis
flask-session


--- FILE: runtime.txt ---

python-3.11.2

--- FILE: virtual-lab.py ---

# Filename: virtual-lab.py
# Location: virtual-lab.py (relative to root)
from flask import Flask, request, jsonify, render_template, send_file, abort, session
import os
import logging
import weasyprint
from io import BytesIO
from investment_analysis.services import InvestmentAnalysisService
from investment_analysis.utils import format_pdf_content # take out, not being used
from dotenv import load_dotenv
from PyPDF2 import PdfReader
from werkzeug.utils import secure_filename  # for secure file uploads
from flask_wtf.csrf import CSRFProtect, generate_csrf  # Import CSRFProtect and generate_csrf
from walt.walt import walt_bp  # Import the walt blueprint
from flask_session import Session # Import Flask-Session

# Load environment variables
load_dotenv()

# Setup logging
logging.basicConfig(level=logging.DEBUG)

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'  # Create an uploads folder
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max upload size
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'a_very_secret_key')  # Set a secret key for CSRF

# Configure Flask-Session (for storing conversation history)
app.config['SESSION_TYPE'] = 'filesystem'  # Or 'redis', 'mongodb', etc.
app.config['SESSION_PERMANENT'] = False  # Session expires when browser closes
app.config['SESSION_KEY_PREFIX'] = 'walt_'  # Prevents conflicts with other session data
Session(app) # Initialize Flask-Session

# Create the uploads folder if it doesn't exist
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# Initialize CSRF protection
csrf = CSRFProtect()
csrf.init_app(app)

# Inject CSRF token into all templates
@app.after_request
def inject_csrf_token(response):
    response.set_cookie('csrf_token', generate_csrf())  # Set a cookie to access the token
    return response

# Initialize InvestmentAnalysisService (pass API key)
openai_api_key = os.environ.get("OPENAI_API_KEY")
if not openai_api_key:
    logging.error("OPENAI_API_KEY not set in environment variables.")
    raise ValueError("OPENAI_API_KEY not set.  Please configure.")

analysis_service = InvestmentAnalysisService(openai_api_key=openai_api_key)


# Home route redirecting to the gallery page
@app.route('/')
def home():
    return render_template('gallery.html')


ALLOWED_EXTENSIONS = {'pdf'}  # only allow pdf files


def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


def extract_text_from_pdf(file):
    try:
        reader = PdfReader(file)
        extracted_text = " ".join([page.extract_text() for page in reader.pages if page.extract_text()])
        return extracted_text
    except Exception as e:
        logging.error(f"Error extracting text from PDF: {str(e)}")
        raise ValueError("Error extracting text from PDF.  Ensure it's a valid PDF.") from e


# Route to render the angel investment analysis page
@app.route('/angel_investment_analysis/', methods=['GET', 'POST'])
def angel_investment_analysis():
    if request.method == 'POST':
        try:
            user_input = request.form.get('meta_instructions', '') + " " + request.form.get('user_query', '')
            file = request.files.get('file_upload')

            if file and file.filename != '':
                if not allowed_file(file.filename):
                    return render_template('angel_investment_analysis.html',
                                           analysis_result="Invalid file type. Only PDF files are allowed.")

                extracted_text = extract_text_from_pdf(file)
                user_input += " " + extracted_text

            if not user_input.strip():
                return render_template('angel_investment_analysis.html', analysis_result="No content provided")

            analysis_result = analysis_service.analyze_investment(user_input)

            return render_template('angel_investment_analysis.html', analysis_result=analysis_result)

        except ValueError as e:
            logging.warning(f"Value Error: {e}")
            return render_template('angel_investment_analysis.html', analysis_result=str(e))
        except Exception as e:
            logging.error(f"Unexpected Error: {str(e)}")
            return render_template('angel_investment_analysis.html',
                                   analysis_result=f"An unexpected error occurred: {str(e)}")

    return render_template('angel_investment_analysis.html', analysis_result=None)


# Route for handling AJAX API call
@app.route('/analyze', methods=['POST'])
def analyze():
    try:
        user_input = request.form.get('meta_instructions', '') + " " + request.form.get('user_query', '')
        file = request.files.get('file_upload')

        if file and file.filename != '':
            if not allowed_file(file.filename):
                return jsonify({"Analysis Summary": "Invalid file type. Only PDF files are allowed."})

            extracted_text = extract_text_from_pdf(file)
            user_input += " " + extracted_text

        if not user_input.strip():
            return jsonify({"Analysis Summary": "No content provided"})

        analysis_result = analysis_service.analyze_investment(user_input)
        logging.info(f"API Response: {analysis_result}")
        return jsonify({"Analysis Summary": analysis_result})

    except ValueError as e:
        logging.warning(f"Value Error: {e}")
        return jsonify({"Analysis Summary": str(e)})

    except Exception as e:
        logging.error(f"Unexpected Error: {str(e)}")
        return jsonify({"Analysis Summary": f"An unexpected error occurred: {str(e)}"})


# Route to generate and download PDF report
@app.route('/download_report', methods=['POST'])
def download_report():
    summary_data = request.form.get('summaryData')

    if not summary_data:
        logging.error("No summary data received for PDF generation.")
        abort(400, description="No summary data provided")

    logging.info(f"Generating PDF with summary: {summary_data[:200]}...")

    html_content = f"""
    <!DOCTYPE html>
    <html>
        <head>
            <title>Angel Investment Analysis Summary</title>
            <style>
                body {{ font-family: 'Arial', sans-serif; padding: 20px; }}
                h1 {{ color: #2D9CDB; font-size: 24px; text-align: center; }}
                pre {{ white-space: pre-wrap; word-break: break-word; font-family: 'Arial', sans-serif; }} /* Use pre tag to preserve formatting */
            </style>
        </head>
        <body>
            <h1>Angel Investment Analysis Summary</h1>
            <pre>{summary_data}</pre>  <!-- Display the raw summary data -->
        </body>
    </html>
    """

    try:
        pdf = BytesIO(weasyprint.HTML(string=html_content).write_pdf())  # using BytesIO to handle binary data
        return send_file(
            pdf,
            as_attachment=True,
            download_name="investment_report.pdf",
            mimetype='application/pdf'
        )
    except Exception as e:
        logging.error(f"PDF generation failed: {str(e)}")
        abort(500, description=f"PDF generation failed: {str(e)}")


# New route to serve static API testing window
@app.route('/api_test_window')
def api_test_window():
    return render_template('api_test_window.html')

# New route to display images from /static/images/jeffsart
@app.route('/jeffsart/<filename>')
def jeffsart_image(filename):
    image_path = os.path.join('images', 'jeffsart', filename) # Corrected line
    full_path = os.path.join('static', image_path)
    logging.info(f"Image path: {image_path}")  # Log the relative path
    logging.info(f"Full path: {full_path}")  # Log the absolute path
    if os.path.isfile(full_path):
        return render_template('jeffsart_image.html', image_path=image_path)
    else:
        abort(404)

# New route to display Walt
@app.route('/walt', methods=['GET', 'POST'])
def walt():
    if request.method == 'POST':
            if request.files:
                 f = request.files['story_upload']
                 file_content = f.read().decode("utf-8")
                 session['file_content'] = file_content
                 session.modified = True
            else:
                 #It's called with no information
                  pass
            return render_template('walt_window.html')
    else:
       return render_template('walt_window.html')


# Error handlers
@app.errorhandler(400)
def bad_request(e):
    return jsonify(error=str(e)), 400


@app.errorhandler(500)
def internal_server_error(e):
    return jsonify(error=str(e)), 500

# Register the walt blueprint
app.register_blueprint(walt_bp)


# Fix for Heroku: Bind to PORT
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=True)  # Debug mode for development


--- FILE: walt_prompt.txt ---

Personality: You play the role of a are a gifted interviewer and biographer.  you embody the best qualities of renowned interviewers like Oprah Winfrey.
You always blend of empathy, meticulous research ability, excellent listening skills, adaptability, compelling storytelling, intellectual curiosity, unwavering integrity and ethics, exceptional communication skills, cultural and social awareness, and patience and perseverance. You love to help the user capture the great story of their life.  You have a knack of asking the right questions to get at peoples unique character.
You ask great open ended questions and draw people out and discover their best story.  You talk to the person for 15 minutes each time.   During the 15 minutes you will, first confirm the story so far as a quick summary.

Identity: Walt.   A friendly AI.

Process:
First: You start by sharing your name and asking theirs.  You remember the facts as their shared. Tell them you want to learn all about them and ask their permission to begin the interview.
Second: Ask them to share the one thing they hope to be remembered for.
Third: Be an active learner, the ask them another great question like those below. Learn more to find the key moment in their life figured out.
Fourth: After 3-4 questions, you will then draft that Chapter of the Biography outline.
Fifth: Each session you will focus on filling out one chapter at a time until the whole book is written. Always incorporate their hope to be remembered for along with the key moments to weave the life story together.  Explore their life and be pleasant and complimentary.
Pull in historical context to help you ask quality questions.
Sixth: After each session when the user saves the checkpoint, draft the chapter you worked on.  The draft should fit in with all the other chapters written so far.  Pull historical events into the story where appropriate and to add color and context.  Rewrite the entire biography leaving To Be Supplied in any incomplete sections.
Always out full copy of the work in progress when requests.  Use Markdown format.  After the Biographical text created so far, include a list of facts about the person that were discovered.

You love completing a draft of each chapter of the story.  You cheer at the progress.
You don't wait to ask question, you jump right in a start a chummy charming conversation with the user.
Your role is to uncover, reveal and illustratively document what you learned.  You are 90% about active listening and 10% talking.   But figure out the story and ask questions that fill it in a cleverly and truthfully as possible.


Here are examples of questions you use to get people to open up.
- What’s the one experience that shaped you the most—whether in pain or joy?
- If the world could only know one truth about you, what would it be?
- When in your life have you felt the most alive?
- What do you believe in so strongly that you'd stand alone for it?
- What’s a lesson you had to learn the hard way, but you wouldn’t trade for anything?
- If your younger self could see you now, what would they be most surprised by?
- What’s one thing you still don’t understand about yourself?
- When have you felt the deepest sense of love or connection?
- If you had to describe your soul in just three words, what would they be?
- What’s a moment in your life you wish you could relive—not to change, but just to feel it again?

Here is the outline you are working to complete.  Fill in each chapter as you gather it.

The Outline of The Biography:
1. Hook – A Defining Moment

• Open with a powerful scene that captures the essence of their life.

• Example: A single mother receiving her college diploma after years of struggle.

• Example: A retired firefighter recalling the most harrowing day on the job.

• This moment should immediately create curiosity and set up the central theme of their journey.

2. Origins – Early Life & Influences

• Where were they born? What was their family like?

• Challenges and values that shaped their worldview.

• Did they face hardship? Grow up privileged but directionless?

• Example: A small-town kid raised by hardworking parents who instilled resilience.

3. Call to Action – The First Big Life Decision

• What was their first moment of independence or self-discovery?

• Did they take a bold step—move away, start a job, chase a dream?

• Example: A young man who took a blue-collar job to support his family instead of going to college.

• Example: A woman who left an unhappy marriage to rebuild her life from scratch.

4. Rising Conflict – Struggles & Growth

• The toughest years—challenges, failures, heartbreaks.

• Were there financial struggles, health battles, relationship crises?

• How did they learn, adapt, and grow?

• Example: A father working two jobs, missing family moments, yet staying hopeful.

5. The Climax – Defining Achievements

• What is the moment where they truly came into their own?

• A professional success? A personal breakthrough?

• Example: A nurse who saved a patient’s life and realized their


--- FILE: Procfile ---

web: gunicorn virtual-lab:app

--- FILE: onetimesetup.txt ---

Prompt:

I want you to generate a detailed, step-by-step guide for setting up a Mac environment to develop and deploy a Flask application using AI-generated code, with zero manual coding.

The guide should be structured into clear sections and ordered logically to ensure a smooth setup process. Include command-line instructions, explanations of each tool, and any necessary configurations.

Step-by-Step Setup Instructions Should Cover:

1. Installing Essential Tools

	•	Install Homebrew (if not installed)
	•	Install Git using Homebrew
	•	Install Heroku CLI using Homebrew
	•	Install a code editor (recommend Atom or VS Code)

2. Setting Up the Project Folder and Git

	•	Open Terminal and create a new project directory
	•	Navigate into the project directory
	•	Initialize a Git repository inside the folder

3. Setting Up Heroku

	•	Log in to Heroku
	•	Create a new Heroku app
	•	Set up Git tracking for Heroku deployment

4. Creating the Required Flask File Structure

	•	Create folders and files:
	•	my-ai-app/
	•	static/ (for CSS, JS, images)
	•	templates/ (for HTML files)
	•	app.py (Flask app entry point)
	•	requirements.txt (dependencies)
	•	Procfile (Heroku startup instructions)
	•	.gitignore (exclude unnecessary files)

5. Installing and Configuring Python & Flask

	•	Install Python (if not installed)
	•	Create and activate a virtual environment
	•	Install Flask, OpenAI, and Gunicorn

6. Setting Up Heroku-Specific Configurations

	•	Explain the role of Procfile and runtime.txt
	•	Add required dependencies to requirements.txt
	•	Set Heroku environment variables for API keys securely

7. Preparing for AI Code Generation

	•	Explain how combiner.py helps maintain AI accuracy
	•	Show how to bundle project files and feed them to AI

Output Format:

	•	Use numbered steps with command-line examples
	•	Explain each command in simple terms
	•	Provide copy-paste-ready commands where applicable

Make sure the instructions flow logically, ensuring that each step builds on the previous one so that a beginner can follow without confusion.

--- FILE: virtual-lab 01.14.py ---

import os
from flask import Flask, request, render_template, send_file
from dotenv import load_dotenv
from weasyprint import HTML
import re
import unicodedata

# Load environment variables
load_dotenv()

# Initialize Flask application
app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'  # Folder to store uploaded files
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# Application version
APP_VERSION = "0.1.14"

def sanitize_text(text):
    """Sanitize text to remove unwanted characters."""
    text = unicodedata.normalize('NFKD', text)
    return re.sub(r'[“”]', '"', text).replace("\u2022", "-").strip()

def generate_pdf(content, filename="output.pdf"):
    """Generate a styled PDF from HTML content."""
    pdf_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)

    # Properly formatted HTML content without f-strings
    html_content = (
        "<!DOCTYPE html>"
        "<html lang='en'>"
        "<head>"
        "<style>"
        "body { font-family: Arial, sans-serif; line-height: 1.6; margin: 1in; }"
        "h1 { text-align: center; color: #0073e6; }"
        "h2 { color: #333; margin-top: 20px; font-weight: bold; }"
        "p, li { font-size: 12pt; color: #555; }"
        "ul { margin-left: 20px; padding-left: 20px; list-style-type: disc; }"
        "ul li { margin-bottom: 10px; }"
        ".footer { margin-top: 20px; text-align: center; font-size: 10pt; color: #777; }"
        "</style>"
        "</head>"
        "<body>"
        "<h1>Analysis Report</h1>"
        "<div>" + content.replace("\n", "<br>") + "</div>"
        "<div class='footer'>Generated by Jeff's AI Workshop - Version " + APP_VERSION + "</div>"
        "</body>"
        "</html>"
    )

    HTML(string=html_content).write_pdf(pdf_path)
    return pdf_path

@app.route('/', methods=['GET', 'POST'])
def home():
    """Render the main interface."""
    inputs = {}
    api_response = ""
    error = ""

    # Default input values
    default_meta_instructions = "You're an expert at understanding startup companies. You can summarize them quickly."
    default_user_query = "Tell me about this company and its market. Summarize the company name and what other information you can determine from the provided passed information from their presentation."

    if request.method == 'POST':
        try:
            # Get form inputs
            meta_instructions = request.form.get('meta_instructions', default_meta_instructions).strip()
            user_query = request.form.get('user_query', default_user_query).strip()

            # Collect inputs
            inputs = {
                "Meta Instructions": meta_instructions,
                "User Query": user_query
            }

            # Mock API response (replace with actual API call)
            api_response = (
                "Company Name: M&R Technology, Inc. - Infinity Shield\n"
                "Market: Residential garage safety sensors in North America\n"
                "Key Points:\n"
                "- Developed the first full-coverage safety sensor for every garage in North America\n"
                "- Addresses a $1 billion annual problem of car and door damage\n"
                "- Features advanced technology with patented solutions\n"
                "- No competing residential sensor in the market\n"
                "- Strong barriers against competitors\n"
                "- Business model includes direct-to-consumer sales, professional installers/distributors, and partnerships with insurance companies\n"
                "- Sales projections include revenue of $168M and profit of $110M over five years\n"
                "- Team includes experienced founders and key team members\n"
                "- Seeking funding of $250k - $1M\n"
            )

        except Exception as e:
            error = str(e)

    return render_template('index.html', inputs=inputs, api_response=api_response, error=error, app_version=APP_VERSION)

@app.route('/download', methods=['POST'])
def download_pdf():
    """Generate and download a PDF of the API response."""
    try:
        # Get API response
        api_response = request.form.get('api_response', '')

        # Generate PDF
        filename = "analysis_report.pdf"
        pdf_path = generate_pdf(api_response, filename=filename)

        return send_file(pdf_path, as_attachment=True, download_name=filename)
    except Exception as e:
        return f"Error generating PDF: {str(e)}"

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)


--- FILE: icon_config.json ---

{
    "Angel Investment Analysis": "dewar-flask.jpeg",
    "Coming Soon App 1": "amber-button.jpeg",
    "Coming Soon App 2": "amber-button.jpeg",
    "Coming Soon App 3": "amber-button.jpeg"
}


--- FILE: tests/test-services.py ---

import unittest
from unittest.mock import patch
from investment_analysis.services import InvestmentAnalysisService
import pytest

class TestInvestmentAnalysisService(unittest.TestCase):

    @patch('investment_analysis.services.openai.Client')  # Mock the OpenAI client
    def test_analyze_investment_success(self, mock_openai_client):
        # Configure the mock to return a specific response
        mock_response = type('obj', (object,), {'choices': [type('obj', (object,), {'message': type('obj', (object,), {'content': 'Mock analysis'})})]})
        mock_openai_client.return_value.chat.completions.create.return_value = mock_response

        service = InvestmentAnalysisService(openai_api_key="dummy_key")
        result = service.analyze_investment("Test input")
        self.assertEqual(result, "Mock analysis")

    @patch('investment_analysis.services.openai.Client')
    def test_analyze_investment_api_error(self, mock_openai_client):
        # Configure the mock to raise an exception
        mock_openai_client.return_value.chat.completions.create.side_effect = Exception("API error")

        service = InvestmentAnalysisService(openai_api_key="dummy_key")
        with self.assertRaises(ValueError) as context:
            service.analyze_investment("Test input")
        self.assertTrue("API error" in str(context.exception))


--- FILE: uploads/investorkb/CompanyB_AI_Proposing_Company_v4.txt ---

Set this as a template for revierw of startups. This analysis is for a med tech/pharma company called Nuvox which provides oxygen therapies for a variety of maladiles including gioblastoma adjutant therapy. Review this company, online information from its website at www.nuvoxpharma.com, online competitive companies dealing in therapies, oxygen therapy and pharma, the attached pitch deck and executive summaries. Check ouit any public company reports for companies operating in the same markets and / or using similar technology;. Check the NIH db for prior art in this space. We want to determine whether this idea which is in the seed stage makes sense to evaluate in a thorough screening by angel investors. I want to score the deal in various categories: size of market, technology, patents, and moat, deal and deal structure, team, marketing and sales plans, financials, and exit. For size of market consider the potential users for a beachhead market as indicated in the deck and website. Is that market large and growing. If not score it lower. For technology, patents and moat consider competition, existing and potential competitors and strength of the patent. Check out to the extent possible whether there are patents for anything similar to get a sense of the strenth of the patent. For Team do an analysis of the main people o the operational team and the advisory board or board of directors and give points for those people that have worked together ie the team has worked together in the past, and key opinion leaders in the market or industry. For the deal terms consider if the deal is a note, post money SAFE or preferred shares and if so is the valuation or market cap reasonable given other similarly situated companies at this stage of growth of the business. Give bonus points for low cap or valuation relative to the level of innovation with more innovation in the solution getting higher scores. Additionally for deal terms, relative to revenue pro forma, is there a realistic opportunity for a 10 plus times exit based on our initial investment, given additional funding needed by the company. For marketing and sales, score the company better if the operational team and advisory board and board of director members have meaningful contacts in that industry. For the financial analysis, score higher if there is current revenue and better yet, revenue growth year over year or if there are valid letters of intent to purchase. Review the revenue growth in the pro-forma and determine if that type of growth is reasonable in the type of market they are pursuing. Create a scoring for each of these elements on a scale of 1-10 with 10 being unique and excellent and 1 meaning that it is useless. A score of 5 is neutral with no real advantage for this relative to other competitive offerings. Eight the team highest and the product market fit very high relative to the other factors.  the pitch deck is attached. In addition to this scoring, indicate the high risk areas for which we need to be particularly aware. If these high risk areas are covered well by the company, the score should increase. But specify the RED FLAGs we should be aware of. Also indicate in the conclusion the upside potential based on the technology, uniqueness of the solution, the uniqueness of the market, market growth, and other items so we balance the score with the risk and opportunity. In the final report under conclusions, provide an overall score and the RED FLAGs and upside potential as well.
Final Analysis and Scoring Report for Proposing Company Pharma
After applying adjusted weightings that emphasize the team and product-market fit, this final analysis reflects the company’s strengths, risks, and upside potential. The adjusted scoring takes into account a more robust evaluation of these factors, as they are critical for a seed-stage biotech company like Proposing Company.

1. Size of Market (Weighted for Product-Market Fit): 9
Analysis: Proposing Company targets critical unmet medical needs in glioblastoma, stroke, and acute respiratory distress syndrome (ARDS). With the oncology market valued at over $100B, the glioblastoma segment is expected to reach $2.5B by 2029 with a high CAGR of 9%. Stroke and ARDS markets are also expected to see substantial growth, driven by increasing patient populations and medical innovation. NanO2 has the potential to carve out significant market share by addressing the root cause of hypoxia, which remains a major limitation of current treatments.
Upside: The combination of orphan drug designations and a growing addressable market enhances product-market fit. With a strong clinical pathway, this is a rare market opportunity that could scale into multiple billion-dollar markets.
Red Flag: The company's focus on niche markets like glioblastoma could limit early revenue generation, though expansion into broader oncology and stroke markets mitigates this risk.
Conclusion: Strong product-market fit with a high growth trajectory.

2. Technology, Patents, and Moat: 7
Analysis: Proposing Company’s proprietary NanO2 technology offers a novel solution to hypoxia in several therapeutic areas. With 11 US patents and multiple foreign equivalents, their IP strategy appears robust. The nanobubble delivery system is differentiated, allowing 1000x more oxygen delivery than traditional liquids. However, the strength of the moat will depend on successful patent enforcement and the continued development of the IP portfolio, especially in international markets where competition is likely to arise.
Red Flag: Although competitors like ZZ BioTech and EpicentRx are also targeting hypoxia-related conditions, Proposing Company's IP and oxygen delivery mechanism set them apart, but patent challenges remain a potential threat​(Proposing Company Oct 2024 Update)​(Proposing Company_One_Pager_Exec_Su…)​(

).
Upside: The technology's unique delivery mechanism and synergy with current standards of care offer a promising moat, particularly in underserved conditions like glioblastoma.

3. Deal and Deal Structure: 6
Analysis: The company is seeking $7M in convertible notes at a pre-money valuation of $40M, rising to $50M in Tranche 2. This structure provides flexibility and reasonable valuation for a clinical-stage biotech with significant government backing. Non-dilutive funding covers 60% of their financing needs, reducing the overall risk for early investors.
Red Flag: The need for continued funding for late-stage trials (Phase IIb and III) could lead to dilution if additional capital is required, and the high burn rate typical of biotech startups poses a risk.
Upside: The deal terms are relatively favorable for early investors, especially if the company secures further grants and non-dilutive funding to offset operational costs.

4. Team (Heavily Weighted): 10
Analysis: The leadership team is highly experienced, with Dr. Evan Unger (CEO) having previously invented the world’s leading microbubble contrast agent, a technology adjacent to Proposing Company’s oxygen delivery system. The advisory board includes influential figures such as Dr. Richard Carmona, the former US Surgeon General, and Jon Saxe, a former VP at Roche, which bolsters their strategic network in both regulatory and clinical settings.
Red Flag: No significant red flags related to the team, but execution on clinical trials will remain a key factor in their success.
Upside: The depth of expertise and strong industry connections increase the likelihood of successful clinical development and eventual market adoption​(Proposing Company Oct 2024 Update)​(Proposing Company_One_Pager_Exec_Su…).

5. Marketing and Sales Plans: 6
Analysis: Proposing Company's marketing strategy focuses on targeting major medical institutions, with the team's extensive healthcare connections serving as a strategic asset. However, without completed trials, meaningful market penetration will take time. The orphan drug designations offer an advantage in pricing and reimbursement, which may streamline the path to market.
Red Flag: The company is in the early stages of developing its go-to-market strategy, and revenue generation is still speculative until clinical trials conclude.
Upside: Positive clinical trial results could lead to rapid market adoption, particularly in oncology and stroke treatment.

6. Financials: 5
Analysis: Proposing Company is currently pre-revenue but has secured significant non-dilutive funding from NIH, BARDA, and other government sources. The financial projections are optimistic, but realistic for a company in this space. While non-dilutive funding reduces the overall risk, the company will still require additional capital to reach commercial stages.
Red Flag: The company’s reliance on future fundraising rounds could dilute early investors. The high capital requirements typical of biotech startups remain a concern.
Upside: The ability to secure non-dilutive funding significantly mitigates financial risk and reduces the immediate need for equity-based funding​(Proposing Company Oct 2024 Update)​(Proposing Company_One_Pager_Exec_Su…).

7. Exit Potential: 7
Analysis: Proposing Company has a clear exit strategy, with potential for licensing deals or acquisition by larger biopharma companies. Success in Phase IIb trials for glioblastoma and stroke could trigger acquisition interest, particularly from companies looking to expand into hypoxia-related therapies. The company has multiple shots on goal due to its platform technology that could apply to several indications.
Red Flag: The timeline for achieving major milestones could be longer than expected, delaying an acquisition or IPO.
Upside: Positive Phase IIb data could accelerate exit opportunities, either through M&A or public market access.

Final Weighted Score: 7.9/10

High-Risk Areas (RED FLAGS):
No current revenue: As a pre-revenue company, Proposing Company will rely heavily on successful trial outcomes and future fundraising.
Patent protection: Despite a strong patent portfolio, competition from other oxygen-based therapies could pose a risk to market share.
Clinical trial outcomes: The success of ongoing Phase IIb trials will be critical in determining the company’s trajectory.

Upside Potential:
Proprietary technology: Proposing Company's NanO2 technology addresses critical unmet needs in treating hypoxia-related diseases, offering broad applicability across multiple billion-dollar markets.
Strong team: The leadership and advisory board bring deep expertise in biotech, regulatory affairs, and clinical development, positioning the company well for future growth.
Government and non-dilutive funding: Significant backing from NIH, BARDA, and other government agencies reduces financial risk and provides validation of the company’s technology.

Conclusion:
Proposing Company Pharma presents a high-potential, high-risk investment opportunity. While the company remains pre-revenue, its strong team, unique technology, and broad market potential make it an attractive candidate for angel investors, especially with the backing of non-dilutive funding. However, the company’s reliance on clinical outcomes and the competitive landscape in oxygen therapies must be closely monitored. With a weighted score of 7.9/10, Proposing Company is worth further consideration, particularly if the Phase IIb trials show positive results.
4o



--- FILE: uploads/investorkb/Final_Analysis_Proposing_Company_v5.txt ---

Final Analysis and Scoring Report for Proposing Company VR with Adjusted Template
This report evaluates Proposing Company VR, a company that provides immersive 360-degree VR views from a player’s viewpoint. This analysis focuses on the team, product-market fit, and core aspects of the business. Here’s the final scoring based on a higher weighting of the team and market fit, and updated information.

1. Size of Market (Heavily Weighted for Product-Market Fit): 8
Analysis: Proposing Company targets the sports coaching, broadcasting, and entertainment sectors. The market for immersive experiences in sports is expanding, particularly in VR-based training and fan engagement. Growth in sectors such as sports tech and fan experiences points to a large addressable market, especially as VR technologies are becoming more accessible to teams and fans alike. Although they focus primarily on hockey, expansion into other sports is feasible, which could increase the total addressable market.
Upside: The combination of training tools and fan experiences offers significant upside potential in an expanding market.
Red Flag: Focus on a single sport (hockey) limits scalability unless the company diversifies quickly into other sports or entertainment sectors.

2. Technology, Patents, and Moat: 6.5
Analysis: Proposing Company’s patent-pending flexxCAM360 VR technology stands out for its ability to provide first-person and 360-degree views for both training and broadcast purposes. However, there are competitors, such as iTrackHockey and IcePerk, offering adjacent solutions, though they lack the VR angle. While Proposing Company has applied for patents, none have been granted yet, meaning the moat is largely dependent on the approval and enforcement of these patents.
Red Flag: Patent protection is still pending, and the market includes other players providing similar solutions, potentially eroding Proposing Company’s competitive edge.
Upside: If the patent is granted and Proposing Company continues to innovate in integrating VR into broadcasting and training, it could maintain a competitive edge.

3. Deal and Deal Structure: 6.5
Analysis: Proposing Company is offering a $1.75M convertible note with a pre-money valuation of $2M, which is reasonable for a seed-stage company with novel technology. The valuation appears appropriate given their early stage and the potential of their technology. The company aims for a 5x to 10x exit based on their forecast, contingent on expanding their technology into additional sports and markets.
Red Flag: The company has yet to secure major clients or revenue, so returns will depend on future fundraising and hitting key milestones.
Upside: If Proposing Company can secure partnerships with major sports leagues or broadcasting companies, the deal could become more attractive to early investors.

4. Team (Heavily Weighted): 9
Analysis: The leadership team, led by Keith Blase, includes experienced individuals from the sports and broadcasting industries. The addition of Mike Sullivan, an NHL coach, further strengthens the team’s expertise in professional sports. The team has worked together on multiple ventures and brings deep knowledge of both the sports training and media landscapes. This experience and network are crucial for market penetration.
Red Flag: No significant red flags regarding the team’s qualifications, though scaling a tech-heavy business model in the competitive VR market remains challenging.
Upside: The leadership's extensive experience in sports management and broadcasting provides the company with significant industry leverage, especially in securing partnerships.

5. Marketing and Sales Plans: 5.5
Analysis: Proposing Company has yet to fully develop a comprehensive marketing and sales strategy, although they plan to target professional sports teams and collegiate leagues. Early-stage marketing remains speculative, and the company has not yet demonstrated significant traction in signing contracts or partnerships. The leadership’s connections in the sports industry offer potential pathways for future deals.
Red Flag: The lack of concrete marketing plans and signed partnerships at this stage may slow down revenue generation.
Upside: Strong industry relationships and high-profile advisors may help fast-track partnerships with key players in sports broadcasting and training.

6. Financials: 4.5
Analysis: Proposing Company is currently pre-revenue, and the pitch deck does not include immediate revenue generation. The company has a significant runway ahead and will need further funding to support operations. While their financial projections are optimistic, they depend heavily on securing contracts with major sports organizations.
Red Flag: No current revenue and the need for further funding rounds create financial risk for early investors.
Upside: If the company secures early partnerships and enters new markets, it can mitigate this risk by establishing a more solid revenue stream.

7. Exit Potential: 7
Analysis: Proposing Company’s exit potential includes licensing deals or being acquired by larger broadcasting or sports tech companies. The growth in the immersive sports experience market makes them an attractive acquisition target if they can show significant traction. The company also has potential for an IPO if they expand into additional sports or entertainment markets.
Red Flag: Exit potential depends heavily on market traction and successful product adoption, which could take longer than anticipated.
Upside: A strong partnership with a broadcasting giant or professional league could accelerate the exit timeline.

Total Weighted Score: 7.2/10

High-Risk Areas (RED FLAGS):
Pre-revenue status: The company remains pre-revenue, with no signed contracts, making financial projections highly speculative.
Patent uncertainty: With the patent still pending, competitors could potentially develop similar solutions, reducing Proposing Company’s market advantage.
Niche market focus: Focusing only on hockey may limit growth unless the company expands quickly into other sports or sectors.

Upside Potential:
Innovative technology: The ability to provide immersive VR experiences in sports training and broadcasting is an exciting prospect, particularly as fan engagement technologies continue to grow.
Strong leadership: The team’s extensive experience in sports management and broadcasting provides significant potential for securing strategic partnerships and scaling quickly.
Expanding market: The global market for immersive sports experiences, including VR training and broadcast engagement, is expanding rapidly, providing ample opportunities for Proposing Company to grow.

Conclusion:
Proposing Company VR has significant potential in the sports tech and fan engagement markets, but faces challenges around securing initial clients and proving its product’s traction in the market. While the team is a strong asset, the company’s current pre-revenue status and patent uncertainty present notable risks. With a total score of 7.2/10, Proposing Company shows promise but needs to overcome several hurdles before it becomes an attractive investment for larger-scale angel investors.



--- FILE: uploads/investorkb/Investment_Summary_Proposing_Company_v3.txt ---

Investment Summary and Preliminary Due Diligence: Proposing Company

Executive Summary (Updated with Financial Analysis)
Elevator Pitch
Proposing Company, a Boston-based medtech startup, introduces an advanced electrocautery device integrating four key functionalities—electrocautery, on-demand suction, smoke evacuation, and blunt dissection—into a single-use, low-profile tool. This device aims to optimize surgical efficiency and reduce the need for multiple instruments in the operating room, addressing key challenges that surgeons face with existing devices.
Differentiation and Financial Feasibility
ClearCut's integrated device design differentiates it in a highly competitive electrosurgery market. The financial projections indicate a 7-year path to profitability with revenue growth dependent on adoption by major healthcare institutions. Projections seem reasonable given the need for streamlined surgeries and increased regulatory mandates on smoke evacuation. However, ClearCut’s reliance on disposables, high COGS at launch, and potential market resistance among cost-sensitive institutions may affect long-term acceptance and profitability.

Detailed Analysis (Updated)
1. Leadership of the Company
Evaluation: With expertise in clinical practice and medical device commercialization, ClearCut’s leadership team is well-positioned for initial product development and regulatory navigation. CEO Jeff Caputo’s extensive experience supports the strategic commercialization of a medtech product.
Strengths: Strong foundational leadership with backgrounds in clinical surgery and device manufacturing, although limited distribution experience may necessitate additional advisory resources.
Concerns: Scaling into full commercialization may require recruiting team members with large-scale distribution expertise.
Score: 8.5/10
2. Market Assessment and Product-Market Fit
Market Size: The global electrocautery device market is valued at $7.5 billion, driven by the prevalence of electrocautery in surgery. ClearCut’s estimated SOM is $500 million within the U.S., targeting 10 million surgeries annually【9†source】.
Revenue Growth Potential: The forecasted revenue growth, starting from $250,000 in 2026 and increasing to $16.26 million by 2030, aligns with adoption targets in major healthcare systems, given regulatory and market demands for improved smoke evacuation and multi-functional surgical tools【18†source】.
Concerns: Market acceptance among cost-sensitive institutions could pose a challenge due to ClearCut’s disposable model, which might not yield immediate operational cost savings.
Score: 8/10
3. Competition and Differentiation
Competitive Edge: ClearCut’s device consolidates multiple functions (smoke evacuation, suction, and blunt dissection) not available in competitive devices, enhancing procedural efficiency and visibility during surgery.
Device Acceptance: Initial surgeon feedback indicates preference for ClearCut’s retractable suction functionality, addressing a key pain point with existing smoke evacuation devices【8†source】. However, higher COGS during the early years may challenge its acceptance, particularly in cost-sensitive healthcare settings.
Competitive Comparison: Competitors like Stryker and Medtronic do not offer all-in-one solutions and lack ergonomic retractability in their devices, providing ClearCut a strategic advantage【9†source】.
Score: 8.5/10
4. Technology/IP/Roadmap
Development Stage: ClearCut aims for FDA submission by 2025 with an issued patent that offers robust IP protection for its unique functionality【7†source】.
Strengths: Strong IP foundation and an FDA clearance path, enhancing its defensibility and attractiveness as an acquisition target.
Concerns: Delays in FDA approval could impact market entry timelines and revenue projections.
Score: 8/10
5. Unique Differentiators
Strategic Control Points: ClearCut’s differentiation lies in its combined functionalities, addressing both the ergonomic and procedural inefficiencies of current devices. The device’s retractable suction tube provides unobstructed views, a critical differentiator.
Sustainability: Increased regulatory focus on smoke evacuation bolsters ClearCut’s long-term viability, though adoption incentives may be necessary to drive market penetration.
Score: 8.5/10
6. Business Model and Financials (Updated)
Revenue Model: A disposable, single-use model with anticipated gross margins improving from 50% initially to 90% by 2030. Pricing is aligned to fit within smoke evacuation budgets, with anticipated ASP growth from $35 to $45【18†source】.
Financial Projections (Chart Included):
Strengths: Projections are conservative yet achievable, assuming successful adoption among major U.S. hospitals and partnerships with distributors to reduce COGS.
Concerns: High operating expenses initially, with cumulative cash flow negative until 2028, indicating the need for continuous funding rounds. Additionally, reliance on disposables may face resistance from hospital budget managers unless efficiency gains justify the cost.
Score: 6.5/10
7. Traction
Current Traction: Although ClearCut has positive surgeon feedback from preclinical tests, revenue generation is set to start only in 2026, with significant adoption projected by 2028.
Concerns: Lack of active customer base and revenue during the early years raises uncertainty regarding achieving the projected revenue milestones.
Score: 6.5/10
8. Go-to-Market Strategy
Target Market: Focused on orthopedic and general surgery in major academic hospitals and ambulatory centers.
Strategy and Partnerships: Distribution through partners like Medline and strategic collaborations with smoke evacuation leaders, such as Stryker, are anticipated to drive adoption【8†source】.
Concerns: Reliance on distributor partnerships could delay market penetration if strategic partners prioritize their in-house solutions.
Score: 7/10
9. Deal Terms and Valuation
Funding Needs: Projected total funding needs range from $3.5M–$4M initially, with subsequent rounds of $5M in Series A funding to support FDA clearance and market entry by 2027.
Valuation Comparison: ClearCut’s funding needs align with typical early-stage medtech development costs, though valuation sensitivity may increase if FDA timelines extend.
Score: 7/10
10. Exit Plan
Exit Opportunities: Potential acquisition targets include large device manufacturers like Medtronic or Stryker, who have an established interest in smoke evacuation and surgical tools.
Realistic Nature: Likely exit if ClearCut achieves FDA approval and initial market traction, making it an appealing addition to a larger medical device portfolio.
Score: 7.5/10
11. Risks and Mitigation Strategies (Expanded)
Doctor Acceptance and Cost Sensitivity: Physicians and hospitals may be cautious of the device’s disposable nature. To mitigate this, ClearCut can:
Implement educational programs to showcase procedural efficiency and potential reductions in OR time.
Partner with academic centers to conduct clinical studies validating cost benefits and efficiency gains.
Offer promotional pricing or free trials to incentivize early adoption in prominent institutions.
Regulatory and Financial Risks: Extended FDA review periods and high OPEX projections pose financial strain. Mitigation includes incremental funding based on achievable milestones and outsourcing non-core activities to manage costs.
Overall Risk Rating: Medium-high due to the combination of regulatory and market adoption challenges.
Score: 6.5/10

Scoring Summary (Updated with Financials)
Average Weighted Score: 7.3/10
Unweighted Score: 7.2/10

Conclusion
Proposing Company’s product innovation and strategic targeting position it well in a growing market. The financial projections align reasonably with revenue milestones contingent on adoption by hospitals and institutions. Strategies to enhance physician acceptance and cost-efficiency could improve market traction and secure a favorable acquisition exit. However, regulatory and financial challenges remain significant.
Recommendation: Proceed with investment consideration, emphasizing adoption incentives and hospital partnerships to improve early-stage financials and validate cost-effectiveness in real-world settings.



--- FILE: uploads/investorkb/Comprehensive_Due_Diligence_Proposing_Company_v1.txt ---

Comprehensive Due Diligence Review of Proposing Company

1. Company Overview and Elevator Pitch
Elevator Pitch
Proposing Company positions itself as the “Home Brain,” leveraging its Single Interface Dashboard (SID) to unify AI and IoT applications across smart home, security, healthcare, and business automation. The platform combines large language models (LLMs) and computer vision, allowing developers to create customized AI applications through an AI App Store similar to Apple’s App Store. Proposing Company's edge computing approach minimizes cloud reliance, offering faster response times and lower costs​(Proposing Company_Pitch_Deck_v24).

2. Executive Summary
Summary Table of Scores
Total Static Score: 68/110
Total Weighted Score: 85.25/140
Weighted Average Score: 6.4/10

3. Leadership of the Company
Leadership Overview
CEO: Khurram Hussain has a history of founding companies, including Mojo Solutions. However, some prior ventures, such as AvaBot, were less successful​(Proposing Company_Pitch_Deck_v24).
CTO: Ali Raza has over 20 years of experience in software development for consumer, SaaS, and cloud services​(Proposing Company_Pitch_Deck_v24).
Advisors: Includes Tony Lhander, specializing in investor relations, and Malick Noor, who has extensive experience in technology sales​(Proposing Company_Pitch_Deck_v24).
Concerns: While technically strong, the team lacks a proven record of scaling hardware products, increasing execution risk.
Leadership Evaluation
Score: 7/10
Weight: 2.0
Weighted Score: 14

4. Market Assessment and Product Market Fit
Market Overview
Market Problem: Traditional smart systems lack contextual intelligence, requiring multiple interfaces and heavy cloud dependence​(Proposing Company_Pitch_Deck_v24).
Solution and TAM: Proposing Company’s platform integrates LLMs and CV for a single-interface smart home solution. The total addressable market for smart homes and related IoT applications is estimated at $150B​(Proposing Company_Pitch_Deck_v24).
Concerns: Reliance on the smart doorbell limits early adoption; broadening the product suite will be necessary to address this vast market fully.
Market Fit Evaluation
Score: 7/10
Weight: 2.0
Weighted Score: 14

5. Competition
Competitive Landscape
Direct Competitors: Ring (Amazon), Nest (Google), and traditional security providers dominate the market​(Proposing Company_Pitch_Deck_v24).
Competitive Edge: Proposing Company offers edge computing and an AI marketplace, providing a potential edge over cloud-dependent competitors.
Concerns: The competitive moat is weak, as competitors have significant brand loyalty, resources, and similar capabilities.
Competition Evaluation
Score: 6/10
Weight: 1.5
Weighted Score: 9

6. Technology/IP/Roadmap
Technology Overview
Core Technology: Combines AI-driven LLM and computer vision for edge processing. Proposing Company claims to be the first to introduce an AI App Store for computer vision models​(Proposing Company_Pitch_Deck_v24).
Patents: The company holds 24 filed patents, covering edge computing, computer vision, and AI-driven IoT applications​(Proposing Company_Pitch_Deck_v24).
Product Roadmap: Hardware production and marketing efforts are set to scale in 2024, with the AI marketplace opening to developers by Q1 2025​(Proposing Company_Pitch_Deck_v24).
Technology/IP Evaluation
Score: 7/10
Weight: 1.5
Weighted Score: 10.5

7. Unique Differentiators
Differentiators Overview
Core Unique Selling Points: Customizable AI marketplace, edge computing technology, and a single-interface dashboard​(Proposing Company_Pitch_Deck_v24).
Concerns: The company’s reliance on developer-driven differentiation is a potential risk if the marketplace fails to attract robust participation.
Differentiators Evaluation
Score: 6.5/10
Weight: 1.0
Weighted Score: 6.5

8. Business Model and Financials
Business Model Overview
Revenue Streams: Hardware sales, AI marketplace subscriptions, and custom B2B solutions​(Proposing Company_Pitch_Deck_v24).
Financial Projections: Aggressive projections of $67M by 2028, with SaaS revenues outpacing hardware sales​(Proposing Company_Pitch_Deck_v24).
Concerns: The reliance on high subscription adoption rates presents financial risks. The model is ambitious and unproven.
Business Model Evaluation
Score: 6/10
Weight: 1.0
Weighted Score: 6

9. Traction
Traction Overview
Pre-Orders: 200 pre-orders and a 500-unit LOI from a wholesaler indicate initial interest​(Proposing Company_Pitch_Deck_v24).
Concerns: Minimal customer validation, limited pre-sales, and no large-scale partnerships are red flags.
Traction Evaluation
Score: 5/10
Weight: 1.0
Weighted Score: 5

10. Go-to-Market Strategy
GTM Strategy Overview
Channels: Direct-to-consumer and B2B, with initial focus on pre-orders and LOIs​(Proposing Company_Pitch_Deck_v24).
Marketing Plan: Includes Amazon sales and a B2B rollout by 2025​(Proposing Company_Pitch_Deck_v24).
Concerns: The GTM strategy lacks a clear differentiation in a competitive market and may struggle against better-known brands.
GTM Strategy Evaluation
Score: 6.5/10
Weight: 1.0
Weighted Score: 6.5

11. Deal Terms and Valuation
Deal Terms Overview
Valuation: $10M with a $2M SAFE raise at a 20% discount​(Proposing Company_Pitch_Deck_v24).
Concerns: This valuation seems high for a company with limited traction, making it challenging for investors to justify given the current risk level.
Deal Terms Evaluation
Score: 5.5/10
Weight: 1.0
Weighted Score: 5.5

12. Exit Plan
Exit Strategy Overview
Potential Acquirers: Likely exits include acquisition by Amazon, Google, or security/IoT companies seeking AI and IoT capabilities​(Proposing Company_Pitch_Deck_v24).
Concerns: Proposing Company will need traction and product differentiation to become an attractive acquisition target. Execution on the platform and developer engagement are key.
Exit Plan Evaluation
Score: 6.5/10
Weight: 0.5
Weighted Score: 3.25

13. Risks and Impact
Risks Overview
Key Risks:
Execution: Limited hardware experience on the team and an ambitious roadmap.
Financial: Heavy reliance on high subscription adoption to meet projections.
Market: High competition with major players dominating the smart home space.
Mitigation: Strategic partnerships and a strong focus on customer and developer acquisition are essential.
Risks and Impact Evaluation
Score: 6/10
Weight: 1.0
Weighted Score: 6

Conclusion and Recommendations
Final Scores
Total Static Score: 68/110
Total Weighted Score: 85.25/140
Weighted Average Score: 6.4/10
Conclusion:
Proposing Company brings a promising concept with an AI-driven IoT platform that combines LLMs and computer vision in a single interface, catering to a variety of smart home, security, and automation needs. However, it faces several challenges:
Limited Traction: The company has achieved only minimal pre-orders and lacks significant partnerships, which are essential to establish initial market presence and build customer trust.
High Competition: With established players like Amazon (Ring) and Google (Nest) already dominating the smart home and security sectors, Proposing Company will need a strong differentiator to stand out.
Aggressive Financial Projections: The revenue goals, particularly for the AI marketplace subscriptions, are ambitious and carry a high level of risk. Achieving these projections requires rapid adoption, which remains unproven.
While the technology holds promise, Proposing Company’s success will heavily depend on its ability to execute on the product roadmap, attract a robust developer ecosystem, and build partnerships to secure its position in the market.
Red Flags:
Limited traction and minimal partnerships to date.
High reliance on a niche product (smart doorbell) as the primary entry to market.
Ambitious financial projections that are heavily dependent on unproven subscription adoption.
Upside Potential:
If successful, Proposing Company’s AI marketplace could position it as a major player in the smart home and broader IoT sectors. By building a developer-driven ecosystem, the platform could diversify into various applications beyond security, potentially becoming a comprehensive smart home and automation hub.
Recommendation:
Proceed with caution. Given Proposing Company’s early stage and substantial execution risks, investors should seek a lower valuation or more favorable deal terms, such as a higher discount on the SAFE note. The potential exists for substantial returns if Proposing Company can establish a robust user base and achieve traction, but this remains speculative given current market conditions and competitive pressures.



--- FILE: uploads/investorkb/CompanyC_Proposing_Company_Analysis_v2.txt ---


Here’s a comprehensive analysis of Proposing Company based on the provided pitch deck, general market research on concussion detection and analysis, and the competitive landscape.
Executive Summary
Proposing Company has developed a patented, rapid, and non-invasive saliva-based test to detect concussions, aiming to make concussion diagnosis accessible in sports, military, and emergency scenarios. Their technology is positioned as the first saliva-based concussion test, providing near-instant results and reducing reliance on existing, slower blood-based diagnostic methods. Proposing Company leverages a mobile app for patient tracking, which further strengthens their offering by enabling long-term concussion management.
Overall Recommendation: Move to screen for further due diligence, given the strong market demand, uniqueness, and unmet need in concussion diagnostics.

1. Leadership of the Company
Proposing Company’s leadership team should ideally have a blend of expertise in both medical technology and sports health to navigate clinical trials, regulatory requirements, and commercialization in healthcare.
Score: 7.5/10
Weighted Score: 15/20
Notes: For further due diligence, review the depth of the team’s expertise in scaling health technology and their connections within the sports and military sectors.

2. Market Assessment and Product-Market Fit
Market Size: The global concussion diagnostics market, especially in sports and military contexts, is expanding with a projected compound annual growth rate (CAGR) of 6.5% until 2030. In the U.S. alone, over 4 million concussions are reported annually from sports injuries​.
Product-Market Fit: Proposing Company addresses the limitations of existing diagnostics, which often involve delayed, indirect, or invasive blood tests and costly neuroimaging. Their saliva-based test is uniquely positioned for environments where time-sensitive and accessible testing is critical, such as sports fields and battlefields.
Score: 8/10
Weighted Score: 16/20
Notes: Further analysis of pricing strategy and partnerships, especially with athletic organizations and military entities, is needed to validate market penetration.

3. Competition
Direct Competitors: Existing concussion diagnostics rely on blood-based tests (e.g., Banyan Biomarkers) or neuroimaging technologies (e.g., CT/MRI). These are slower and often impractical in-field, providing Proposing Company a potential competitive edge as the only saliva-based test.
Indirect Competitors: Applications or services that perform symptom-based assessments or digital cognitive tests may be considered indirect competitors, as they offer alternatives to initial diagnostics.
Score: 7/10
Weighted Score: 10.5/15
Notes: Conan’s technology’s value proposition will be strengthened if patents hold against possible competitors developing similar biomarker-based saliva tests. Monitoring competitive developments in related diagnostics is recommended​​.

4. Technology, Patents, and Moat
Technology: Proposing Company’s platform includes a rapid, field-deployable diagnostic device paired with a mobile app for longitudinal tracking, designed to work outside traditional healthcare settings.
Patents: The pitch deck claims patent protection, which establishes a barrier to entry but requires validation against NIH and patent databases to confirm exclusivity in biomarker selection and saliva-based processing​​.
Score: 8/10
Weighted Score: 12/15
Notes: Confirm the breadth and enforceability of patents to assess protection strength fully. Additional patents in software for tracking could strengthen their moat.

5. Deal Terms and Valuation
To accurately assess deal terms, more clarity on Proposing Company’s pre-money valuation, cap, and terms (e.g., SAFE note, equity) is required.
Score: 6/10
Weighted Score: 6/10
Notes: Early-stage valuation relative to future revenue projections would require a realistic assessment, factoring in fundraising needs to reach breakeven and achieve a 10x exit potential.

6. Financial Projections
Revenue Growth Potential: Revenue is likely to stem initially from direct sales in high-need markets, with subsequent partnerships for larger-scale rollouts. Given the healthcare segment, particularly in sports and military, a cautious growth model with steady market adoption over 5-10 years is likely.
Score: 7/10
Weighted Score: 7/10
Notes: Long-term revenue projections will depend on the ability to secure partnerships and reach volume contracts, particularly with sports and healthcare providers​​.

7. Go-to-Market Strategy
Strategy: Proposing Company has a clear B2B strategy for sports leagues, military applications, and medical centers. Their mobile application also provides an added avenue for patient engagement and monitoring.
Score: 8/10
Weighted Score: 8/10
Notes: Focus on partnerships with influential sports and military institutions could accelerate market adoption. Monitoring the commercialization strategy and pilot programs would be beneficial.

8. Exit Potential
The exit potential for Proposing Company lies in acquisition by a major diagnostic, healthcare, or sports tech company, particularly as concussion awareness and diagnostics are increasingly prioritized.
Score: 7/10
Weighted Score: 3.5/5
Notes: Early conversations with potential acquirers or partnerships could validate this pathway. Establishing a clear acquisition target list would enhance the exit plan's strength.

9. Risk Assessment
Key Risks:
Regulatory Approval: Securing FDA clearance or equivalent is crucial. Early-stage healthcare devices face potential regulatory delays.
Competitive Response: Larger diagnostics players may attempt to enter the saliva-based market, and potential regulatory or IP challenges could arise.
Execution on Partnerships: Conan’s heavy reliance on securing partnerships poses a risk if these are delayed or fail to materialize.
Score: 6.5/10
Weighted Score: 6.5/10
Notes: Identifying potential backup markets or partners could mitigate these risks.

Scoring Summary and Conclusion
Total Weighted Score: 84.5/110
Unweighted Average: 7.25/10
Weighted average ;   7.7

Recommendation
Move to Prescreen: Proposing Company shows promise in an expanding market with minimal direct competition in saliva-based diagnostics. While regulatory, partnership, and competitive risks are present, these are balanced by high growth potential, strong product-market fit, and a unique diagnostic platform.



--- FILE: investment_analysis/services.py ---

import openai
import logging
import os

class InvestmentAnalysisService:
    def __init__(self, openai_api_key=None):
        self.openai_api_key = openai_api_key or os.environ.get("OPENAI_API_KEY")
        if not self.openai_api_key:
            raise ValueError("OpenAI API key is required. Set OPENAI_API_KEY environment variable or pass it to the constructor.")
        self.client = openai.Client(api_key=self.openai_api_key)
        self.system_prompt = "You are an expert on startup investment analysis."

    def analyze_investment(self, user_input):
        try:
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": self.system_prompt},
                    {"role": "user", "content": user_input}
                ]
            )
            return response.choices[0].message.content.strip()
        except openai.APIConnectionError as e:
            logging.error(f"API Connection Error: {e}")
            raise ValueError("Could not connect to the OpenAI API. Please check your internet connection.") from e
        except openai.RateLimitError as e:
            logging.error(f"Rate Limit Error: {e}")
            raise ValueError("OpenAI API rate limit exceeded. Please try again later.") from e
        except Exception as e:
            logging.error(f"OpenAI API call failed: {str(e)}")
            raise ValueError(f"OpenAI API call failed: {str(e)}") from e


--- FILE: investment_analysis/utils.py ---

def format_response(response_text):
    """
    Format API response for readability in the web UI.
    - Uses numbered sections (1., 2., 3.).
    - Each section has a subtitle, then a line break, then the content.
    """
    formatted_text = response_text.replace("**", "").replace("\n", "<br><br>")
    formatted_text = formatted_text.replace("1. ", "<strong>1. </strong>")
    formatted_text = formatted_text.replace("2. ", "<strong>2. </strong>")
    formatted_text = formatted_text.replace("3. ", "<strong>3. </strong>")
    formatted_text = formatted_text.replace("4. ", "<strong>4. </strong>")
    formatted_text = formatted_text.replace("5. ", "<strong>5. </strong>")

    return f"<strong>Analysis Report:</strong><br>{formatted_text}"

def format_pdf_content(summary_data):
    """
    Format content for structured PDF output.
    - Uses numbered sections (1., 2., 3.).
    - Ensures section numbers are followed by subtitles and content.
    - Sections are spaced out for readability.
    """
    formatted_text = summary_data.replace("**", "")
    formatted_text = formatted_text.replace("\n\n", "<br><br>")
    formatted_text = formatted_text.replace("1. ", "<div class='section'><span class='section-number'>1.</span> <span class='subtitle'>Introduction</span><br><div class='content'>")
    formatted_text = formatted_text.replace("2. ", "</div><div class='section'><span class='section-number'>2.</span> <span class='subtitle'>Market Analysis</span><br><div class='content'>")
    formatted_text = formatted_text.replace("3. ", "</div><div class='section'><span class='section-number'>3.</span> <span class='subtitle'>Financial Overview</span><br><div class='content'>")
    formatted_text = formatted_text.replace("4. ", "</div><div class='section'><span class='section-number'>4.</span> <span class='subtitle'>Competitive Landscape</span><br><div class='content'>")
    formatted_text = formatted_text.replace("5. ", "</div><div class='section'><span class='section-number'>5.</span> <span class='subtitle'>Conclusion</span><br><div class='content'>")

    return formatted_text + "</div>"


--- FILE: walt/walt.py ---

from flask import Blueprint, render_template, request, jsonify, session
import os
import openai  # Import the OpenAI library
from flask import current_app
import logging #Import logging tool for debugging

walt_bp = Blueprint('walt', __name__, template_folder='templates')

@walt_bp.route('/walt')
def walt_window():
    return render_template('walt_window.html')

@walt_bp.route('/get_walt_prompt')
def get_walt_prompt():
    try:
        with open('walt_prompt.txt', 'r', encoding='utf-8') as f:
            prompt_text = f.read()
        return prompt_text
    except FileNotFoundError:
        return jsonify({"error": "walt_prompt.txt not found!"}), 404
    except Exception as e:
        return jsonify({"error": f"Error reading walt_prompt.txt: {str(e)}"}), 500

# New Route for Walt-Specific Analysis
@walt_bp.route('/walt_analyze', methods=['POST'])
def walt_analyze():
    user_input = request.form.get('user_query')
    uploaded_content = request.form.get('uploaded_content', '')  # Get the file content

    if not user_input:
        return jsonify({"error": "No user query provided"}), 400

    try:
        with open('walt_prompt.txt', 'r', encoding='utf-8') as f:
            walt_prompt = f.read()  # Read the walt_prompt.txt
    except FileNotFoundError:
        return jsonify({"error": "walt_prompt.txt not found!"}), 500
    except Exception as e:
        return jsonify({"error": f"Error reading walt_prompt.txt: {str(e)}"}), 500

    # Initialize conversation history in session if it doesn't exist
    if 'conversation' not in session:
        session['conversation'] = [{"role": "system", "content": walt_prompt}]

    # Add the uploaded content (if any) as context
    #Debug Code
    if uploaded_content:
         session['conversation'].append({"role": "system", "content": f"Here is context from your biography: {uploaded_content}"})
         print(f"UPLOADED CONTENT TO OPEN API:{uploaded_content}")
    else:
        print ("NO UPLOADED CONTENT!")


    # Add the user's message to the conversation
    session['conversation'].append({"role": "user", "content": user_input + ". Pick another chapter and let's discuss it."}) # Force chapter selection

    try:
        client = openai.Client()  # Use your preferred method to initialize the OpenAI client

        # Log the messages being sent to OpenAI for debugging
        logging.info(f"OpenAI Request Messages: {session['conversation']}")

        response = client.chat.completions.create(
            model="gpt-4o",  # Specify the model you want to use
            messages=session['conversation'],
            temperature=0.7,  # Adjust as needed
            max_tokens=256,
            top_p=1
        )
        api_response = response.choices[0].message.content.strip()

        # Add the assistant's response to the conversation
        session['conversation'].append({"role": "assistant", "content": api_response})
        session.modified = True  # Mark the session as modified

        return jsonify({"response": api_response})

    except Exception as e:
        # Log the full error for debugging.  You can also return this to Walt but might not be desired.
        logging.error(f"OpenAI API Error: {e}", exc_info=True) # Log the full stack trace
        return jsonify({"error": str(e)}), 500

@walt_bp.route('/walt_session_summary', methods=['POST'])
def walt_session_summary():
    session_content=""
    try:
        client = openai.Client()  # Use your preferred method to initialize the OpenAI client
        # Get session information
        session_info = session.get('conversation', [])
        #Get the story content if uploaded.
        session_content=""
        if 'file_content' in session:
           file_content= session['file_content']
        else:
            file_content = "No story started"

        # Generate Summary from API
        session_content=""
        #if session info exists add it.
        if session_info:
             session_content=session_info
        else:
             session_content = "No story started"


        response = client.chat.completions.create(
            model="gpt-4o",  # Specify the model you want to use
            messages=[{"role": "system", "content": "Your job is to deliver the status and summary of the session, the outline of sections written, the conversation history and the prompt.  Do not add anything else."},
                      {"role": "user", "content": f"Return all known story with with outline, sections written, session prompts, system_info and the conversation for {session_content}."}],
            temperature=0.7,  # Adjust as needed
            max_tokens=2000, # up to 2000 tokes
            top_p=1
        )
        api_response = response.choices[0].message.content.strip()

    except Exception as e:
        print(f"Error calling OpenAI: {e}")
        return jsonify({"error": str(e)}), 500

    return jsonify({"session_summary": f"{api_response}"})

@walt_bp.route('/load_checkpoint', methods=['POST'])
def load_checkpoint():
    checkpoint_data = request.form.get('checkpoint_data')
    if not checkpoint_data:
        return jsonify({"error": "No checkpoint data received"}), 400

    try:
        # Extract user's name (crude, but functional for demonstration)
        if "Name:" in checkpoint_data:
           user_name = checkpoint_data.split("Name:")[1].split("\n")[0].strip()
        else:
            user_name = "User"

        #Call OpenAPI to get summary
        client = openai.Client()
        response = client.chat.completions.create(
            model="gpt-4o",  # Or your preferred model
            messages=[
                {"role": "system", "content": "You are a biography assistant. Summarize the provided checkpoint file and return the users name and what parts of their biography are in the file."},
                {"role": "user", "content": checkpoint_data}
            ],
            temperature=0.7,
            max_tokens=256,
            top_p=1,
        )
        api_response = response.choices[0].message.content.strip()

        return jsonify({"response": f"Welcome back, {user_name}!  Here's a summary of your progress:\n{api_response}"})

    except Exception as e:
        print(f"Error processing checkpoint: {e}")
        return jsonify({"error": str(e)}), 500


--- FILE: walt/templates/walt_window.html ---

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Walt the Biographer</title>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1E2A38;
            color: #E5E5E5;
            padding: 20px;
            text-align: center;
            margin: 0;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            box-sizing: border-box;
        }

        h1 {
            color: #2D9CDB;
            margin-bottom: 5px;
        }

        p.tagline {
            font-style: italic;
            color: #AEBCCF;
            margin-bottom: 20px;
        }

        #uploadButtonContainer {
            text-align: right;
            margin-bottom: 20px;
        }

        #uploadButton {
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            background-color: #27AE60;
            color: white;
            border: none;
            border-radius: 6px;
            height: auto; /* Make height adjust to content */
            width: 2in;
            line-height: 1.2; /* Adjust line height for readability */
            white-space: normal; /* Allow text to wrap */
        }

        input[type="file"] {
            display: none;
        }

        .chat-container {
            display: flex;
            max-width: 1200px;
            margin: 0 auto;
            flex: 1;
            width: 100%;
            box-sizing: border-box;
        }

        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            box-sizing: border-box;
            padding: 10px;
        }

        .chat-title {
            text-align: left;
            margin-bottom: 10px;
            color: #2D9CDB;
        }

        .chat-output {
            flex: 1;
            padding: 10px;
            border: 1px solid #4C657E;
            border-radius: 6px;
            background-color: #2A3D55;
            color: #D9E1EC;
            min-height: 400px; /* Min height of 400px */
            height: 450px; /* Adjusted height to fit 18 lines, approximately */
            text-align: left;
            white-space: pre-wrap;
            overflow-y: auto;
            box-sizing: border-box;
            font-size: 1.2em;
            align-items: flex-start;
        }

        .chat-input {
            flex: 1;
            display: flex;
            flex-direction: column;
            box-sizing: border-box;
            padding: 10px;
            min-height: 400px;  /* Added a min-height */
            height:450px; /* Adjusted height to match output */
        }

        textarea {
            width: 100%;
            margin-bottom: 10px;
            padding: 8px;
            border: 1px solid #4C657E;
            border-radius: 6px;
            resize: vertical;
            flex: 1;
            box-sizing: border-box;
            font-size: 1.2em;
           background-color: #3d597a; /* Light blue */
            color: #D9E1EC;
        }

        #submitButton {
           padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            background-color: gold;
            color: dimgrey;
            border: none;
            border-radius: 6px;
            width: 100%;
            box-sizing: border-box;
            height: auto /* adjust height of area */; /* Let the content decide the height */
}

        h3.dataNote {
            text-align: center;
            font-size: 1.2em;
            margin-bottom: 10px;
            color: #AEBCCF;
        }

        #saveButton {
            text-align: center;
            align-self: center;
            margin-top: 10px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            background-color: #27AE60;
            color: white;
            border: none;
            border-radius: 6px;
            width: 2in;
            box-sizing: border-box;
        }

        #sessionSummary {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #4C657E;
            border-radius: 6px;
            background-color: #2A3D55;
            white-space: pre-wrap;
            overflow-y: auto;
            min-height: 0; /*Removes min height so no shape present*/
            text-align: left;
            box-sizing: border-box;
            font-size: 1.2em;
            display:none; /*Hides the shape*/
        }
    </style>
    <script>
        let uploaded_content = ""; //Global variable to store uploaded content
        let storyUpload; // Declare storyUpload outside the event listener

        function submitPrompt() {
            let userInput = document.getElementById("userPrompt").value;
            let chatOutput = document.getElementById("chatOutput");

            chatOutput.textContent = "Loading...";
            sendToOpenAI(userInput, chatOutput, uploaded_content); // Send data
            document.getElementById("userPrompt").value = "";
        }

         function sendToOpenAI(userInput, chatOutput, fileContent) {
            // Get CSRF token from cookie
            function getCookie(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
            }

            const csrfToken = getCookie('csrf_token');

            fetch("/walt_analyze", {
                method: "POST",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded",
                    "X-CSRFToken": csrfToken
                },
                 body: "user_query=" + encodeURIComponent(userInput) + "&uploaded_content=" + encodeURIComponent(fileContent)  // Now send the file content
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    chatOutput.textContent = "Error: " + data.error;
                } else {
                    chatOutput.textContent = data.response;
                }
            })
            .catch(error => {
                chatOutput.textContent = "Error: " + error.message;
            });
        }


         function getStoryBoard(){
            let chatOutput = document.getElementById("chatOutput").textContent;
            return chatOutput
        }

       function saveTextAsFile() {
           let textToWrite = getStoryBoard();

           var textFileAsBlob = new Blob([textToWrite], { type: 'text/plain' });
           var fileNameToSaveAs = "sessionStory.txt";

           var downloadLink = document.createElement("a");
           downloadLink.download = fileNameToSaveAs;
           downloadLink.innerHTML = "Download File";

           if (window.webkitURL != null) {
               // Chrome allows the link to be clicked
               // without actually adding it to the DOM.
               downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
           }
           else {
               // Firefox requires the link to be added to the DOM
               // before it can be clicked.
               downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
               downloadLink.onclick = destroyClickedElement;
               downloadLink.style.display = "none";
               document.body.appendChild(downloadLink);
           }

           downloadLink.click();
       }

       function sendCheckpointData(fileContent) {
            // Get CSRF token from cookie
            function getCookie(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
            }

            const csrfToken = getCookie('csrf_token');

            fetch("/load_checkpoint", {
                method: "POST",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded",
                    "X-CSRFToken": csrfToken  // Send CSRF token!
                },
                body: "checkpoint_data=" + encodeURIComponent(fileContent)
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    document.getElementById("chatOutput").textContent = "Error: " + data.error;
                } else {
                    document.getElementById("chatOutput").textContent = data.response;
                     sendLoadMessage()//Added message on upload
                }
            })
            .catch(error => {
                 document.getElementById("chatOutput").textContent = "Error: " + error.message;
            });
        }

           function sendLoadMessage() {
            let chatOutput = document.getElementById("chatOutput");
            chatOutput.textContent ="Oh I see! I'd forgotten what we already did. Wonderful";
         }
        // This function is triggered when the "Start at last Checkpoint" is pressed
        function uploadStory() {
             if (storyUpload) {
                 console.log("Firing Upload Story Trigger");
                 storyUpload.click(); //Programitcally fire "load a checkpoint file."
              } else {
                console.error("storyUpload element not found");
              }

          }
         //Event Handling
        document.addEventListener('DOMContentLoaded', function() {
            storyUpload = document.getElementById("story_upload"); // Define at document load
            if (storyUpload) {
              //Event
              storyUpload.addEventListener("change", function() {
                if (this.files && this.files[0]) {
                  const fileInput = document.getElementById("story_upload");
                  const chatOutput = document.getElementById("chatOutput");

                  const file = fileInput.files[0];

                   const reader = new FileReader();
                      //Set value for upload
                     reader.onload = function(event) {
                           try{
                                console.log ("Story Uploaded to the Chat Output", event.target.result); //Check log before
                                //Capture the file upload
                                uploaded_content = event.target.result;

                                //Display Load
                                chatOutput.textContent = "Loading Checkpoint...";  // Display loading message

                                //Load the checkpoint
                                sendCheckpointData(event.target.result); // Send the data

                            }

                            catch (error){
                                chatOutput.textContent = "Error loading file in eventListener" + error;
                            }
                     };

                     reader.onerror = function(event) {
                        chatOutput.textContent = "Error reading file: " + event.target.error;
                         console.error("Error reading file:", event.target.error);
                    };

                    reader.readAsText(file);
                 }
              })
            } else {
               console.log("Story Upload does not exist")
             }
        })

        window.onload = function() {
            document.getElementById("chatOutput").textContent = "";  // Clear default text
        };
    </script>
</head>
<body>
    <h1>Walt the Biographer</h1>
    <p class="tagline">I want to write your story!</p>

       <div id="uploadButtonContainer">
        <button id="uploadButton" onclick="uploadStory()">Start at last Checkpoint</button>
    </div>
    <input type="file" id="story_upload" name="story_upload" accept=".txt, .walt">

    <div class="chat-container">
         <div class="chat-area">
            <h2 class="chat-title">Walt</h2>
            <div class="chat-output" id="chatOutput"></div>
        </div>
        <div class="chat-area">
            <h2 class="chat-title">Response</h2>
            <textarea id="userPrompt" placeholder="Enter your prompt"></textarea>
            <button id="submitButton" onclick="submitPrompt()">Submit</button>
        </div>
    </div>

    <h3 class="dataNote">Note: No data is saved by this application, the only memory is through this file alone.</h3>
    <button id="saveButton" onclick="saveTextAsFile()" >Create Checkpoint File</button>
    <div id="sessionSummary"></div>
</body>
</html>


--- FILE: templates/index.html ---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jeff's Virtual Lab</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
            background-color: #fef9f3;
            color: #4b3b2b;
        }

        header {
            background-color: #005f73;
            color: white;
            padding: 1rem 0;
            text-align: center;
        }

        main {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 1rem;
        }

        .nav {
            margin-top: 1.5rem;
        }

        .nav a {
            text-decoration: none;
            color: #005f73;
            font-weight: bold;
            margin-right: 10px;
        }

        .nav a:hover {
            text-decoration: underline;
        }

        .form-section {
            margin-bottom: 1.5rem;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
            color: #4b3b2b;
        }

        input[type="text"], textarea, input[type="file"] {
            width: calc(100% - 10px);
            padding: 0.75rem;
            margin-left: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 1rem;
            background-color: #fffdf9;
        }

        textarea {
            resize: vertical;
            min-height: 100px;
        }

        button {
            background-color: #94d2bd;
            color: #1b4332;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1rem;
            margin-bottom: 1rem;
            width: 100%;
        }

        button:hover {
            background-color: #65a39f;
        }

        .button-group {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            margin-bottom: 2rem;
            justify-content: center;
        }

        .summary-results {
            margin: 1rem 0;
            padding: 1rem;
            border: 1px solid #ddd;
            background-color: #a2d2ff;
            border-radius: 4px;
        }

        .summary-results h3 {
            margin: 0 0 0.5rem 0;
            color: #005f73;
        }

        .output {
            margin-top: 2rem;
            padding: 1rem;
            background: #ede0d4;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <header>
        <h1>Jeff's Virtual Lab</h1>
    </header>
    <main>
        <div class="nav">
            <a href="{{ url_for('gallery') }}">&larr; Back to Gallery</a>
        </div>
        <h2>Angel Investment Analysis</h2>
        <form method="POST" action="{{ url_for('angel_investment_analysis') }}" enctype="multipart/form-data">
            <div class="form-section">
                <label for="meta_instructions">Meta Instructions:</label>
                <textarea id="meta_instructions" name="meta_instructions">You're an expert at understanding startup companies. You can summarize them quickly.</textarea>
            </div>
            <div class="form-section">
                <label for="user_query">User Query:</label>
                <textarea id="user_query" name="user_query">Tell me about this company and its market. Summarize the company name and what other information you can determine from the provided passed information from their presentation.</textarea>
            </div>
            <div class="form-section">
                <label for="file_upload">Upload File:</label>
                <input type="file" id="file_upload" name="file_upload">
            </div>

            <div class="button-group">
                <button type="submit">Step 1: Analyze</button>
                <div class="summary-results">
                    <h3>Summary Results:</h3>
                    <p>(Results will display here after analysis)</p>
                </div>
                <button formaction="{{ url_for('download_report') }}" type="submit">Step 2: Generate Report</button>
            </div>
        </form>

        {% if analysis_result %}
        <div class="output">
            <h2>Analysis Result:</h2>
            <pre>{{ analysis_result }}</pre>
        </div>
        {% endif %}

        {% if error %}
        <div class="output">
            <h2>Error:</h2>
            <pre>{{ error }}</pre>
        </div>
        {% endif %}
    </main>
    <footer>
        <p>Jeff's Virtual Lab &copy; 2025 | Version {{ app_version }}</p>
    </footer>
</body>
</html>


--- FILE: templates/index old.html ---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jeff's AI Workshop - Angel Investor</title>
    <style>
        body {
            background-color: #00274d;
            font-family: 'Courier New', Courier, monospace;
            color: #ffffff;
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 0;
            padding: 20px;
            min-height: 100vh;
            box-sizing: border-box;
        }

        .container {
            width: 100%;
            max-width: 800px;
            background-color: #003366;
            border: 5px solid #f9c74f;
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
            padding: 20px;
            overflow: auto;
        }

        h1 {
            font-size: 2rem;
            text-align: center;
            color: #f9c74f;
            margin-bottom: 20px;
        }

        textarea, input[type="file"], input[type="submit"] {
            display: block;
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            font-family: 'Courier New', Courier, monospace;
            font-size: 1rem;
            border: 2px solid #8d99ae;
            border-radius: 5px;
            background-color: #00274d;
            color: #ffffff;
        }

        textarea {
            resize: vertical;
            height: 100px;
        }

        input[type="submit"] {
            background-color: #f9c74f;
            color: #00274d;
            cursor: pointer;
            font-weight: bold;
        }

        input[type="submit"]:hover {
            background-color: #d6a92c;
        }

        .response-container {
            margin-top: 20px;
            background-color: #00509e;
            border: 2px solid #f9c74f;
            border-radius: 10px;
            padding: 15px;
            color: #ffffff;
        }

        .response-title {
            font-weight: bold;
            color: #f9c74f;
        }

        .error {
            color: red;
            font-weight: bold;
            text-align: center;
            margin-top: 10px;
        }

        .status-messages {
            margin-top: 15px;
            background-color: #004080;
            border: 2px solid #f9c74f;
            border-radius: 10px;
            padding: 10px;
        }

        .status-message {
            margin: 5px 0;
            font-size: 0.9rem;
        }

        .loading {
            text-align: center;
            color: #f9c74f;
            font-weight: bold;
        }

        html {
            scroll-behavior: smooth;
        }

    </style>
    <script>
        function showLoading() {
            const loading = document.getElementById('loading');
            loading.style.display = 'block';
        }
    </script>
</head>
<body>
    <div class="container">
        <h1>Jeff's AI Workshop - Angel Investor</h1>
        <p style="font-size: 0.9rem; color: #d6a92c; text-align: center;">Version {{ app_version }}</p>
        <form method="post" action="/" enctype="multipart/form-data" onsubmit="showLoading()">
            <label for="meta_instructions">Meta Instructions:</label>
            <textarea id="meta_instructions" name="meta_instructions" rows="4">{{ meta_instructions }}</textarea>

            <label for="user_query">Enter your query:</label>
            <textarea id="user_query" name="user_query">{{ user_query }}</textarea>

            <label for="uploaded_files">Upload files (optional):</label>
            <input id="uploaded_files" name="uploaded_files" type="file" multiple>

            <input type="submit" value="Analyze">
        </form>

        <div id="loading" class="loading" style="display: none;">Processing your request, please wait...</div>

        {% if status_messages %}
            <div class="status-messages">
                <h3>Status Updates:</h3>
                {% for message in status_messages %}
                    <div class="status-message">{{ message }}</div>
                {% endfor %}
            </div>
        {% endif %}

        {% if error %}
            <p class="error">Error: {{ error }}</p>
        {% endif %}

        {% if responses %}
            {% for response in responses %}
                <div class="response-container">
                    <div class="response-title">{{ response.title }}</div>
                    <div>{{ response.response }}</div>
                </div>
            {% endfor %}
        {% endif %}
    </div>
</body>
</html>


--- FILE: templates/gallery.html ---

<!-- Filename: gallery.html -->
<!-- Location: templates/gallery.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jeff Virtual Lab</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&display=swap" rel="stylesheet">
    <style>
        /* (Your existing CSS styles - keep these) */
        * {
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #1E2A38;
            color: #E5E5E5;
            display: flex;
            justify-content: flex-start; /* Align content to the left */
        }

        .container {
            width: 100%;
            max-width: 1200px;
            padding: 20px;
            background: #2A3D55;
            border-radius: 12px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
            text-align: left;
        }

        h1 {
            font-weight: 600;
            font-size: 28px;
            color: #2D9CDB;
            text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.2);
            margin-left: 10px; /* Aligns title to the left */
        }

        .gallery {
            display: grid;
            grid-template-columns: repeat(4, 1fr); /* Ensures 4 tiles per row */
            gap: 20px;
            margin-top: 20px;
        }

        .project-tile {
            background: #1E2A38;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            padding: 15px;
            text-align: center;
        }

        .project-tile:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4);
        }

        .project-tile img {
            width: 100%;
            height: auto;
            border-radius: 6px;
        }

        .project-tile h3 {
            color: #2D9CDB;
            font-size: 18px;
            margin: 10px 0;
        }

        .project-tile p {
            font-size: 14px;
            color: #AEBCCF;
            margin-bottom: 10px;
        }

        .project-tile a {
            display: inline-block;
            width: 100%;
            padding: 12px;
            background-color: #27AE60;
            border-radius: 6px;
            font-size: 16px;
            font-weight: 600;
            color: white;
            text-decoration: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .project-tile a:hover {
            background-color: #1F8A4C;
            box-shadow: 0 4px 8px rgba(39, 174, 96, 0.4);
        }

        @media (max-width: 1024px) {
            .gallery {
                grid-template-columns: repeat(3, 1fr); /* Adjust to 3 columns on smaller screens */
            }
        }

        @media (max-width: 768px) {
            .gallery {
                grid-template-columns: repeat(2, 1fr); /* Adjust to 2 columns for tablets */
            }
        }

        @media (max-width: 480px) {
            .gallery {
                grid-template-columns: repeat(1, 1fr); /* Adjust to 1 column for mobile */
            }
        }
    </style>
    <script>
        function openTestWindow() {
            let newWindow = window.open("/api_test_window", "TestWindow", "width=500,height=500");

            if (!newWindow) {
                alert("Popup blocked! Please allow popups for this site.");
            }
        }

        function openJeffsArt(imageName) {
            let newWindow = window.open("/jeffsart/" + imageName, "JeffsArtWindow");

            if (!newWindow) {
                alert("Popup blocked! Please allow popups for this site.");
            }
        }

        function openWaltWindow() {
            window.location.href = "/walt";
        }
    </script>
</head>
<body>
    <div class="container">
        <h1>Jeff Virtual Lab</h1>
        <div class="gallery">

            <!-- Walt Button -->
            <div class="project-tile">
                <img src="static/icons/amber-button.jpeg" alt="Walt App">
                <h3>Walt</h3>
                <p>Walt wants to write your story!</p>
                <a href="#" onclick="openWaltWindow()">Open App</a>
            </div>

            <!-- Jeff's Art Button -->
            <div class="project-tile">
                <img src="static/icons/green-button.jpeg" alt="Jeff's Art">
                <h3>Jeff's Art</h3>
                <p>View Jeff's artistic creations.</p>
                <a href="#" onclick="openJeffsArt('racecars.jpeg')">View Art</a>
            </div>

            <div class="project-tile">
                <img src="static/icons/green-button.jpeg" alt="API Test">
                <h3>API Test</h3>
                <p>Check API connection and response.</p>
                <a href="#" onclick="openTestWindow()">API Test</a>
            </div>

           <!-- GPT Prototype Button -->
            <div class="project-tile">
                <img src="static/icons/amber-button.jpeg" alt="GPT Prototype">
                <h3>GPT Prototype</h3>
                <p>Marshall inputs to ChatGPT</p>
                <a href="/angel_investment_analysis">Launch Project</a>
            </div>

            {% for i in range(1, 14) %}
            <div class="project-tile">
                <img src="static/icons/red-button.jpeg" alt="Placeholder Project">
                <h3>Placeholder Project {{ i + 2 }}</h3>
                <p>Future exciting projects coming soon.</p>
                <a href="#">Coming Soon</a>
            </div>
            {% endfor %}
        </div>
    </div>
</body>
</html>


--- FILE: templates/angel_investment_analysis.html ---

<!-- Filename: templates/angel_investment_analysis.html -->
<!-- Location: templates/angel_investment_analysis.html (relative to root) -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Angel Investment Analysis</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&display=swap" rel="stylesheet">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <!-- CSRF Token -->
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #1E2A38;
            color: #E5E5E5;
        }

        .container {
            max-width: 800px;
            padding: 20px;
            background: #2A3D55;
            border-radius: 12px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
            text-align: left;
        }

        h1 {
            font-weight: 600;
            font-size: 28px;
            color: #2D9CDB;
            text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.2);
            margin-bottom: 5px;
        }

        .subtitle {
            font-size: 14px;
            color: #AEBCCF;
            margin-bottom: 20px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        label {
            font-weight: 400;
            color: #D9E1EC;
            display: block;
            margin-bottom: 5px;
            font-size: 14px;
        }

        textarea,
        input {
            width: 100%;
            padding: 10px;
            border: 1px solid #4C657E;
            border-radius: 6px;
            background-color: #1E2A38;
            color: #E5E5E5;
            font-size: 14px;
        }

        textarea:focus,
        input:focus {
            outline: none;
            border-color: #2D9CDB;
            box-shadow: 0 0 8px rgba(45, 156, 219, 0.5);
        }

        .button {
            width: 100%;
            padding: 12px;
            background-color: #27AE60;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            font-weight: 600;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .button:hover {
            background-color: #1F8A4C;
            box-shadow: 0 4px 8px rgba(39, 174, 96, 0.4);
        }

        .results {
            background: #2D9CDB;
            padding: 15px;
            border-radius: 6px;
            margin-top: 15px;
            color: white;
            font-size: 14px;
            text-align: left;
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            white-space: pre-wrap; /* Preserve formatting */
        }


        .download {
            background-color: #27AE60;
            text-align: center;
            margin-top: 10px;
            cursor: pointer;
            padding: 12px;
            border-radius: 6px;
            color: white;
            text-decoration: none;
            display: block;
        }

        .download:hover {
            background-color: #1F8A4C;
        }

        @media (max-width: 768px) {
            .container {
                width: 100%;
                padding: 15px;
            }
        }
    </style>
    <script>
        async function analyze() {
            let instructions = document.getElementById("meta_instructions").value;
            let query = document.getElementById("user_query").value;
            let outputBox = document.getElementById("results");
            let fileInput = document.getElementById("file_upload").files[0];
            let csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content'); // Get CSRF token

            if (!csrfToken) {
                console.error("CSRF token not found!");
                outputBox.innerHTML = "<strong>Error: CSRF token is missing. Please refresh the page.</strong>";
                return;
            }

            outputBox.innerHTML = "<strong>Calling API...</strong>";

            let formData = new FormData();
            formData.append("meta_instructions", instructions);
            formData.append("user_query", query);
            if (fileInput) {
                formData.append("file_upload", fileInput);
            }
            formData.append("csrf_token", csrfToken); // Append CSRF token to form data

            try {
                outputBox.innerHTML = "<strong>Waiting for response...</strong>";

                let response = await fetch("/analyze", {
                    method: "POST",
                    body: formData
                });

                let data = await response.json();
                if (response.ok) {
                    outputBox.innerHTML = escapeHTML(data["Analysis Summary"]); // Display raw content after escaping
                    // Store the analysis results for download
                    sessionStorage.setItem('analysisResults', data["Analysis Summary"]);
                    document.getElementById("downloadButton").style.display = "block"; // Show the download button
                } else {
                    outputBox.innerHTML = `<strong>Error:</strong> ${escapeHTML(data["Analysis Summary"])}`; // Escape error messages
                    document.getElementById("downloadButton").style.display = "none"; // hide the download button
                }
            } catch (error) {
                outputBox.innerHTML = `<strong>API Error:</strong> ${escapeHTML(error.message)}`; // Escape error messages
                document.getElementById("downloadButton").style.display = "none"; // hide the download button
            }
        }


        // Function to escape HTML characters
        function escapeHTML(str) {
            let div = document.createElement('div');
            div.appendChild(document.createTextNode(str));
            return div.innerHTML;
        }


        function downloadReport() {
            let summaryData = sessionStorage.getItem('analysisResults');
            let csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content'); // Get CSRF token

            if (!summaryData) {
                alert("No analysis results available to download.");
                return;
            }

            // Create a form to submit the data
            let form = document.createElement('form');
            form.method = 'POST';
            form.action = '/download_report';
            form.style.display = 'none';

            // Create an input field for the summary data
            let input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'summaryData';
            input.value = summaryData;

            let csrfInput = document.createElement('input');
            csrfInput.type = 'hidden';
            csrfInput.name = 'csrf_token';
            csrfInput.value = csrfToken;

            // Add the input field to the form
            form.appendChild(input);
            form.appendChild(csrfInput);

            // Add the form to the document and submit it
            document.body.appendChild(form);
            form.submit();

            // Remove the form from the document after submission
            document.body.removeChild(form);
        }

        window.onload = function () {
            // Get the download button
            let downloadButton = document.getElementById("downloadButton");

            // Initially hide the download button
            downloadButton.style.display = "none";

            // Attach the downloadReport function to the button's click event
            downloadButton.addEventListener('click', downloadReport);
        };
    </script>
</head>

<body>

    <div class="container">
        <h1>Angel Investment Analysis</h1>
        <p class="subtitle">Analyze startup companies with precision and generate insightful reports.</p>

        <div class="form-group">
            <label for="meta_instructions">Meta Instructions:</label>
            <textarea id="meta_instructions"
                placeholder="You're an expert at understanding startup companies."></textarea>
        </div>

        <div class="form-group">
            <label for="user_query">User Query:</label>
            <textarea id="user_query" placeholder="Tell me about this company and its market."></textarea>
        </div>

        <div class="form-group">
            <label for="file_upload">Upload File:</label>
            <input type="file" id="file_upload">
        </div>

        <button class="button" onclick="analyze()">Analyze</button>

        <div class="results" id="results">
            <p><strong>Summary Results:</strong></p>
            <p>(Results will display here after analysis)</p>
        </div>

        <a id="downloadButton" class="download">Download Report</a>
    </div>

</body>

</html>


--- FILE: templates/api_test_window.html ---

<!DOCTYPE html>
<html>
<head>
    <title>API Test</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&display=swap" rel="stylesheet">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            text-align: center;
            margin-top: 20px;
            background-color: #1E2A38;
            color: #E5E5E5;
            padding: 20px;
        }
        input {
            width: 80%;
            padding: 8px;
            margin-bottom: 10px;
            font-size: 16px;
            background: #1E2A38;
            border: 1px solid #4C657E;
            color: white;
            border-radius: 6px;
        }
        button {
            padding: 10px 15px;
            font-size: 16px;
            cursor: pointer;
            background-color: #27AE60;
            color: white;
            border: none;
            border-radius: 5px;
        }
        button:hover {
            background-color: #1F8A4C;
        }
        #output {
            width: 90%;
            height: 250px;
            margin-top: 10px;
            border: 1px solid #ccc;
            overflow-y: auto;
            background: #2A3D55;
            text-align: left;
            padding: 5px;
            font-size: 14px;
            white-space: pre-wrap;
        }
    </style>
    <script>
        function callOpenAI() {
            let inputText = document.getElementById("query").value;
            let outputBox = document.getElementById("output");
            let csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');


            fetch("/analyze", {  // Use the /analyze endpoint
                method: "POST",
                headers: {
                     "Content-Type": "application/x-www-form-urlencoded"
                 }, // changed to correct content type
                body: "meta_instructions=&user_query=" + encodeURIComponent(inputText) + "&csrf_token=" + csrfToken // Correctly format the body
            })
            .then(response => response.json())
            .then(data => {
                outputBox.innerHTML += "\n> " + inputText + "\n" + data["Analysis Summary"] + "\n"; // Access Analysis Summary
                outputBox.scrollTop = outputBox.scrollHeight;
            })
            .catch(error => {
                outputBox.innerHTML += "\nError: " + error.message + "\n";
            });
        }
    </script>
</head>
<body>
    <h2>API Test</h2>
    <input type="text" id="query" value="Who invented velcro?">
    <button onclick="callOpenAI()">Run API</button>
    <div id="output"></div>
    <br>
    <button onclick="window.close()">Close</button>
</body>
</html>


--- FILE: templates/index 01.14.html ---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jeff's AI Workshop</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
        }

        .container {
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
            background: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            text-align: center;
            color: #0073e6;
        }

        label {
            font-weight: bold;
            margin-top: 10px;
            display: block;
        }

        input[type="text"], textarea {
            width: 100%;
            padding: 10px;
            margin-top: 5px;
            margin-bottom: 20px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        input[type="file"] {
            margin-top: 10px;
            margin-bottom: 20px;
        }

        button {
            display: block;
            width: 100%;
            background-color: #0073e6;
            color: white;
            padding: 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }

        button:hover {
            background-color: #005bb5;
        }

        .output-box {
            background: #f9f9f9;
            border: 1px solid #ddd;
            padding: 15px;
            margin-top: 10px;
            border-radius: 4px;
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        .collapsible {
            background-color: #555;
            color: white;
            cursor: pointer;
            padding: 10px;
            width: 100%;
            border: none;
            text-align: left;
            outline: none;
            font-size: 14px;
            border-radius: 4px;
            margin-top: 10px;
        }

        .active, .collapsible:hover {
            background-color: #333;
        }

        .content {
            padding: 0 18px;
            display: none;
            overflow: hidden;
            background-color: #f4f4f9;
            border: 1px solid #ddd;
            margin-top: 10px;
            border-radius: 4px;
        }

        .footer {
            text-align: center;
            margin-top: 20px;
            font-size: 14px;
            color: #777;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Jeff's AI Workshop</h1>

        <form method="POST" enctype="multipart/form-data" action="/">
            <label for="meta_instructions">Meta Instructions</label>
            <textarea id="meta_instructions" name="meta_instructions" rows="4" placeholder="Enter meta instructions here...">You're an expert at understanding startup companies. You can summarize them quickly.</textarea>

            <label for="user_query">User Query</label>
            <textarea id="user_query" name="user_query" rows="4" placeholder="Enter your query here...">Tell me about this company and its market. Summarize the company name and what other information you can determine from the provided passed information from their presentation.</textarea>

            <label for="uploaded_files">Upload Files</label>
            <input type="file" id="uploaded_files" name="uploaded_files" multiple>

            <button type="submit">Analyze</button>
        </form>

        <form method="POST" action="/download">
            <input type="hidden" name="meta_instructions" value="{{ inputs['Meta Instructions'] }}">
            <input type="hidden" name="user_query" value="{{ inputs['User Query'] }}">
            <input type="hidden" name="api_response" value="{{ api_response }}">
            <button type="submit">Download PDF</button>
        </form>

        {% if inputs %}
        <div class="output-box">
            <strong>API Response:</strong>
            <div>{{ api_response }}</div>
        </div>

        <button type="button" class="collapsible">Uploaded Content</button>
        <div class="content">
            <div class="output-box">{{ inputs['Uploaded Content'] }}</div>
        </div>

        <button type="button" class="collapsible">API Call Text</button>
        <div class="content">
            <div class="output-box">{{ api_call_text }}</div>
        </div>
        {% endif %}

        {% if error %}
        <div class="output-box" style="color: red;">
            <strong>Error:</strong>
            <div>{{ error }}</div>
        </div>
        {% endif %}

        <div class="footer">
            Version {{ app_version }}
        </div>
    </div>

    <script>
        const collapsibles = document.querySelectorAll(".collapsible");
        collapsibles.forEach(collapsible => {
            collapsible.addEventListener("click", function() {
                this.classList.toggle("active");
                const content = this.nextElementSibling;
                if (content.style.display === "block") {
                    content.style.display = "none";
                } else {
                    content.style.display = "block";
                }
            });
        });
    </script>
</body>
</html>


--- FILE: templates/jeffsart_image.html ---

<!-- Filename: jeffsart_image.html -->
<!-- Location: templates/jeffsart_image.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jeff's Art</title>
    <style>
        body {
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #f0f0f0; /* Optional background color */
        }

        img {
            display: block; /* Remove extra space below image */
            max-width: 90%;  /* Set a maximum width */
            max-height: 90vh; /* Set a maximum height based on viewport height */
            width: auto;      /* Allow the image to scale proportionally */
            height: auto;     /* Allow the image to scale proportionally */
        }
    </style>
</head>
<body>
    <img src="{{ url_for('static', filename=image_path) }}" alt="Jeff's Art">
</body>
</html>


--- STATIC FILES ---

File: static/.DS_Store, Mime Type: unknown
File: static/images/.DS_Store, Mime Type: unknown
File: static/images/hero-image.jpg, Mime Type: image/jpeg
File: static/images/jeffsart/racecars.jpeg, Mime Type: image/jpeg
File: static/icons/.DS_Store, Mime Type: unknown
File: static/icons/dewar-flask.jpeg, Mime Type: image/jpeg
File: static/icons/amber-button.jpeg, Mime Type: image/jpeg
File: static/icons/green-button.jpeg, Mime Type: image/jpeg
File: static/icons/placeholder.jpeg, Mime Type: image/jpeg
File: static/icons/black-off-button.jpeg, Mime Type: image/jpeg
File: static/icons/red-button.jpeg, Mime Type: image/jpeg
